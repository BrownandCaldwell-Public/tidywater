[{"path":[]},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement sjohnson2@brwncald.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to tidywater","title":"Contributing to tidywater","text":"Thank interest contributing tidywater package! guide includes best practices help prepare contribution. guide adapted tidyverse contribution guide. also generally adhere tidyverse code review principles. First foremost, don’t wnat intimidated process! don’t understand steps guide, reach maintainers issues page help get started. believe tidywater users can make valuable contributions, even new R new package development.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to tidywater","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line .Rd file.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to tidywater","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See tidyverse guide create great issue advice. Files naming conventions Pull request process Code style","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/CONTRIBUTING.html","id":"files-and-naming-conventions","dir":"","previous_headings":"Bigger changes","what":"Files and naming conventions","title":"Contributing to tidywater","text":"File name typically match name function (_chain _once helper functions file baseline function. can’t find file function want modify, try GitHub’s search function. Model functions follow naming convention: “treatmentapplied_modelapplied” R/ file corresponding test file. Create file opening R/ file running usethis::use_test() console. help writing tests, look existing tests read documentation testthat package. new data added package, corresponding usethis function must run generate .rda file. security transparency reasons, data files can re-created scripts data-raw folder accepted package. vignettes generated .Rmd files. man/ - Roxygen documentation files automatically generated devtools::document()","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to tidywater","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"BrownandCaldwell-Public/tidywater\", fork = TRUE). Install development dependencies pak::local_install_dev_deps(), make sure package passes R CMD check running devtools::check(). Also run devtools::document() make sure everything needed update documentation. don’t run cleanly produce changes, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html. minimum include GitHub user name issue numbers resolved. example: Add warning chemdose_dbp input water outside model range (#12, @username)","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to tidywater","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/CONTRIBUTING.html","id":"licensing","dir":"","previous_headings":"","what":"Licensing","title":"Contributing to tidywater","text":"package contributions make licensed MIT Apache 2.0. See GitHub’s terms service understand contribution work existing licenses.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to tidywater","text":"Please note tidywater project released Contributor Code Conduct. contributing project agree abide terms. Portions guide adapted OmicNavigator package MIT license. Copyright (c) 2021-2023 AbbVie Inc.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/COPYRIGHT.html","id":null,"dir":"","previous_headings":"","what":"COPYRIGHT","title":"COPYRIGHT","text":"Copyright (c) 2025 Brown Caldwell software licensed terms MIT Apache 2.0 licenses. See LICENSE file root repository information.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/DISCLAIMER.html","id":null,"dir":"","previous_headings":"","what":"Disclaimer","title":"Disclaimer","text":"tidywater package provided information, experimental, educational purposes . used lieu engineering operational expertise. Always consult drinking water professional applying theoretical models real-world drinking water quality. software licensed MIT Apache License 2.0. See LICENSE file repository complete terms.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/GOVERNANCE.html","id":null,"dir":"","previous_headings":"","what":"Roles and responsibilities","title":"Roles and responsibilities","text":"project users, contributors, core developers, project lead, security reviewers.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/GOVERNANCE.html","id":"users","dir":"","previous_headings":"","what":"Users","title":"Roles and responsibilities","text":"People use tidywater water quality modeling important members community; without users, project purpose. Users encouraged participate life project community much possible. User contributions help ensure project satisfying users’ needs. Common user activities include (limited ): evangelising project asking answering community forums Users continue engage project community often find becoming involved. users may go become contributors, described .","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/GOVERNANCE.html","id":"contributors","dir":"","previous_headings":"","what":"Contributors","title":"Roles and responsibilities","text":"Contributors interact project GitHub filing new issues, improving existing issues, submitting pull requests. Anyone can become contributor: expectation commitment project, required set skills, selection process. obligation follow code conduct. Specific advice contributing project can found CONTRIBUTING.md.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/GOVERNANCE.html","id":"core-developers","dir":"","previous_headings":"","what":"Core developers","title":"Roles and responsibilities","text":"Core developers collectively responsible day--day development package, including responding issues reviewing pull requests. Changes proposed pull requests, merged reviewed least one core developer. Changes API (especially breaking changes) must also approved project lead. core developers tidywater : * Libby McKenna * Riley Mulhern Core developers recruited contributors. invitation join core team can extended anyone made major contribution, either small number large changes, consistent pattern smaller contributions. existing core developer can propose contributor invited core team emailing project lead. project lead confirm invitation core developers. core developers bound code conduct.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/GOVERNANCE.html","id":"project-lead","dir":"","previous_headings":"","what":"Project lead","title":"Roles and responsibilities","text":"project lead, Sierra Johnson, responsible : Setting, clearly communication strategic objectives project. Mediating conflicts amongst core developers. Ensuring project survives long term. project lead bound code conduct.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/GOVERNANCE.html","id":"security-reviewers","dir":"","previous_headings":"","what":"Security reviewers","title":"Roles and responsibilities","text":"Security reviewers admins GitHub repo represent Brown Caldwell’s Digital Services team. reponsible reviewing security concerns, updating permissions repo, pull requests must approved one member team. contact team concerns, email: CybersecReview@brwncald.com","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/GOVERNANCE.html","id":"decision-making-process","dir":"","previous_headings":"","what":"Decision-making process","title":"Roles and responsibilities","text":"project makes decisions according consensus model suggestions considered discussed community core developers, typically GitHub issues. consensus reached, project lead’s word final. community questions decision, project lead may review either uphold reverse . Brown Caldwell security reviewers may override decisions time.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/LICENSE.html","id":"license","dir":"","previous_headings":"","what":"License","title":"MIT License","text":"work dual-licensed MIT Apache 2.0 (later version). can choose one use work. terms license .","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Brown Caldwell Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/LICENSE.html","id":"apache-license","dir":"","previous_headings":"","what":"Apache License","title":"MIT License","text":"Copyright 2025 Brown Caldwell Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":"Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":[]},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"MIT License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"MIT License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"MIT License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"MIT License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"MIT License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"MIT License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"MIT License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"MIT License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"MIT License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/SECURITY.html","id":null,"dir":"","previous_headings":"","what":"Security Policy","title":"Security Policy","text":"##️ Supported Versions aim support recent stable release project. Older versions may receive security updates unless explicitly stated. Version | Supported | |———|———–| Latest | ✅ | Older | ⚠️ critical fixes (possible) |","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/SECURITY.html","id":"reporting-a-vulnerability","dir":"","previous_headings":"","what":"Reporting a Vulnerability","title":"Security Policy","text":"believe found security vulnerability project, please create public issue. Instead, please contact us privately: 📧 Email: CybersecReview@brwncald.com respond quickly possible confirm receipt begin investigating.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/SECURITY.html","id":"responsible-disclosure","dir":"","previous_headings":"","what":"Responsible Disclosure","title":"Security Policy","text":"request give us reasonable time fix issue disclosing publicly. committed resolving issues promptly responsibly.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/SECURITY.html","id":"no-warranty","dir":"","previous_headings":"","what":"No Warranty","title":"Security Policy","text":"project provided “”, without warranty guarantees. See LICENSE.md full details. _ Thank helping keep tidywater users safe!","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/articles/coeff_fitting_chemdose_dbp.html","id":"water-setup","dir":"Articles","previous_headings":"","what":"Water setup","title":"Fitting and using custom coefficients in chemdose_dbp","text":"Let’s assume ’re working drinking water treatment facility concerned disinfection byproducts (DBPs) distribution system want use tidywater help predict DBP formation due chlorine addition. initial assessment, can use facility’s influent water disinfection method predict DBPs using chemdose_dbp function. influent water object now populated slots corresponding predicted DBP concentrations coagulation, including tthm total trihalomethanes haa5 sum haloacetic acids. However, comparing results facility’s record, realize default model coefficients used chemdose_dbp don’t accurately predict DBP formation facility. can still use chemdose_dbp; just need fit coefficients customized facility.","code":"influent <- define_water(ph = 7.5, temp = 20, alk = 50, toc = 4, uv254 = .2, br = 50) %>%   chemdose_dbp(cl2 = 2, time = 8, treatment = \"coag\", cl_type = \"chlorine\", location = \"plant\") #> Warning in define_water(ph = 7.5, temp = 20, alk = 50, toc = 4, uv254 = 0.2, : #> Missing value for DOC. Default value of 95% of TOC will be used. #> Warning in define_water(ph = 7.5, temp = 20, alk = 50, toc = 4, uv254 = 0.2, : #> Major ions missing and neither TDS or conductivity entered. Ideal conditions #> will be assumed. Ionic strength will be set to NA and activity coefficients in #> future calculations will be set to 1."},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/articles/coeff_fitting_chemdose_dbp.html","id":"fitting-dbp-coefficients","dir":"Articles","previous_headings":"","what":"Fitting DBP coefficients","title":"Fitting and using custom coefficients in chemdose_dbp","text":"can use optim() function fit custom coefficients facility’s DBP data. example, let’s say predictions chloroform (chcl3) accurate. First, let’s visualize facility data default DBP predictions. graph shows, default coefficients consistently -predict amount DBPs formed water (points 1:1 line).  Now, can fit custom coefficients facility’s DBP data. following code builds code ’ve already used uses default chcl3 coefficients initial parameters. Even optim() doesn’t converge, new coefficients outputs still provide better fit defaults. Running optim() example take approximately 2 seconds, typical optim() function. optim() constrained number maximum iterations, can take longer parallel processing can used speed time long.  Note inputting new coefficients chemdose_dbp, must formatted data frame proper column names: ID (corresponding DBP coefficients apply - individual species, chemical formula), , , b, c, d, e, f. data frame can passed argument chemdose_dbp helper function. example, can visualize facility DBP data, default DBP predictions, custom DBP coefficient predictions see predictions chemdose_dbp custom coefficients fits real data little better ’s closer 1:1 line. coefficient optimization process can repeated DBPs whose concentrations fit default coefficients well. Now facility custom coefficients chloroform, can continue use chemdose_dbp coefficients personalized plant make better predictions effluent chloroform.","code":"# Given sample data dbp_data <- data.frame(   ph = c(7, 7.04, 7.5, 7.9, 7.2, 7.25),   temp = rep(20, 6),   alk = c(50, 66, 75, 80, 55, 100),   toc = c(4, 8, 4, 10, 5, 6),   uv254 = c(0.1, 0.2, 0.2, 0.1, 0.05, 0.2),   br = rep(50, 6),   fin_chcl3 = c(62, 138.5, 71, 206, 83.5, 100) ) %>%   define_water_df(\"input\")  # Predicted chcl3 concentrations using default coefficients plot_unfit_dbps <- dbp_data %>%   chemdose_dbp_df(\"input\", cl2 = 2, time = 8, treatment = \"raw\", cl_type = \"chlorine\", location = \"plant\") %>%   pluck_water(input_waters = c(\"disinfected\"), parameter = c(\"chcl3\"))  ggplot(plot_unfit_dbps, aes(x = fin_chcl3, y = disinfected_chcl3)) +   geom_point() +   geom_abline(slope = 1, intercept = 0, linetype = \"dashed\", color = \"red\") +   labs(     title = \"Observed vs predicted chloroform\",     x = \"Observed chloroform\",     y = \"Default Predicted chloroform\"   ) +   expand_limits(x = 0, y = 0) # Model we're trying to fit model_fn <- function(params, data) {   custom_coeff <- data.frame(     ID = \"chcl3\", \"A\" = params[1], \"a\" = params[2], \"b\" = params[3], \"c\" = params[4], \"d\" = params[5], \"e\" = params[6],     \"f\" = params[7], ph_const = NA   )   temp_data <- data %>%     chemdose_dbp_df(\"input\",       cl2 = 2, time = 8, treatment = \"raw\", cl_type = \"chlorine\", location = \"plant\",       coeff = custom_coeff     ) %>%     pluck_water(input_waters = c(\"disinfected\"), parameter = c(\"chcl3\")) %>%     mutate(diff = (disinfected_chcl3 - fin_chcl3)^2)   sum(temp_data$diff) }  # optimize the coefficients  test <- optim(par = c(6.237e-2, 1.617, -0.094, -0.175, 0.607, 1.403, 0.306), fn = model_fn, data = dbp_data, control = list(maxit = 100)) coeffs <- data.frame(   ID = \"chcl3\",   A = test$par[1],   a = test$par[2],   b = test$par[3],   c = test$par[4],   d = test$par[5],   e = test$par[6],   f = test$par[7],   ph_const = NA )  dbp_data <- dbp_data %>%   chemdose_dbp_df(input_water = \"input\", output_water = \"coeff_disinfected\", cl2 = 2, time = 8, coeff = coeffs) %>%   pluck_water(input_waters = c(\"coeff_disinfected\"), parameter = c(\"chcl3\"))  ggplot() +   geom_point(data = plot_unfit_dbps, aes(x = fin_chcl3, y = disinfected_chcl3, color = \"Default coeffs\")) +   geom_point(data = dbp_data, aes(x = fin_chcl3, y = coeff_disinfected_chcl3, color = \"Custom coeffs\")) +   geom_abline(slope = 1, intercept = 0, linetype = \"dashed\", color = \"red\") +   labs(     title = \"Observed vs predicted chloroform\",     x = \"Observed chloroform\",     y = \"Predicted chloroform\"   ) +   scale_color_manual(     name = \"Prediction type\",     breaks = c(\"Default coeffs\", \"Custom coeffs\"),     values = c(\"black\", \"blue\")   ) +   expand_limits(x = 0, y = 0)"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/articles/coeff_fitting_chemdose_dbp.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Fitting and using custom coefficients in chemdose_dbp","text":"tutorial, learned use custom coefficients predict DBP concentrations using coeff argument chemdose_dbp. custom coefficients can obtained fitting using optim() saved new data frame containing personalized values. coeff argument gives user flexibility create model best reflects specific conditions still using tidywater package. introduction tidywater package, check intro tidywater vignettes.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/articles/help_functions_blend_waters.html","id":"blending-analysis-setup","dir":"Articles","previous_headings":"","what":"Blending analysis setup","title":"Blending Multiple Waters","text":"analysis, hypothetical drinking water utility sources water river lake, high hardness. operators investigating whether blending 5 MGD two groundwater wells reduce total hardness 200 mg/L CaCO3.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/articles/help_functions_blend_waters.html","id":"well-setup","dir":"Articles","previous_headings":"","what":"Well setup","title":"Blending Multiple Waters","text":"First, let’s take look available groundwater data Well Well B. use define_water_df models can added dataframe. ’s always good idea verify code working properly. make sure data balanced using balance_ions_df, can plot water class using plot_ions. example shows index water class column: dataframe$water_class_column[[row_number]]   Let’s continue blending analysis. ’re going treat two wells single groundwater source. Blending can calculated Well_A_ratio * Well_A concentration + Well_B_ratio * Well_B_concentration. fine parameters, pH acid/base equilibrium species, blending little complicated. Enter: blend_waters. function blends waters ’d expect, pH blending math . example , ’re going blending inefficiently. don’t worry, better blending example later. mix two wells, blend row 1 balanced_water row 2 balanced_water. “vertical” blending efficient useful large data frames. water objects pivoted, hence row--row blending. later examples, actually blend columns, amenable piped code chunks. balanced_water function takes 2 waters (must water class), corresponding ratios water.","code":"# Read in data from Wells A and B raw_wells_water <- tibble(   Well = c(\"A\", \"B\"),   ph = c(8, 9),   alk = c(100, 150),   temp = c(18, 19),   ca = c(5, 10),   cond = c(500, 900),   tds = c(300, 500),   na = c(100, 200),   k = c(0, 20),   cl = c(0, 30),   so4 = c(0, 0) ) %>%   define_water_df() %>%   balance_ions_df()  raw_wells_water >#  [38;5;246m# A tibble: 2 × 3 [39m >#   Well  defined balanced >#    [3m [38;5;246m<chr> [39m [23m  [3m [38;5;246m<list> [39m [23m   [3m [38;5;246m<list> [39m [23m   >#  [38;5;250m1 [39m A      [38;5;246m<water> [39m  [38;5;246m<water> [39m  >#  [38;5;250m2 [39m B      [38;5;246m<water> [39m  [38;5;246m<water> [39m # Ion plot before balance_ions_df was applied raw_wells_water$defined[[1]] %>%   plot_ions() # Plot of balanced ions raw_wells_water$balanced[[1]] %>%   plot_ions() # Blend \"vertically\": blends the data in well A's row with that of well B's. # The pluck function from the purrr package is useful for indexing a water class column ### First, index the water column using the name or number of the column (ie \"balanced_water\" or 3 (column number)) ### Next, index the row  blended_wells_water <- blend_waters(   waters = c(     pluck(raw_wells_water, \"balanced\", 1),     pluck(raw_wells_water, 3, 2)   ),   ratios = c(.5, .5) ) # outputs a water class object. blended_wells_water ># pH (unitless):  8.72  ># Temperature (deg C):  18.5  ># Alkalinity (mg/L CaCO3):  125  ># Use summary functions or slot names to view other parameters."},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/articles/help_functions_blend_waters.html","id":"blending-scenarios-and-finish-source-setup","dir":"Articles","previous_headings":"","what":"Blending scenarios and finish source setup","title":"Blending Multiple Waters","text":"create data frame blend scenarios modeling, case, varying flow rates different sources. finish blending wells, transform blended_wells water object data frame containing water column. river lake sources don’t require mixing. ’ll set raw data balance ions using define_water_df make data frame water column. balance_ions_df, specifying name output columns can use different water sources later. tidywater’s _df functions option name output column. Defaults vary depending _df function.","code":"# Assume wells can contribute up to 5 MGD each groundwater <- tibble(Wells_flow = c(0, 2.5, 5)) # Blending scenarios and the resulting source water ratios scenarios <- tibble(   surface_flow = seq(2, 20, 2),   River_flow = c(seq(2, 10, 2), rep(10, 5)),   Lake_flow = c(rep(0, 5), seq(2, 10, 2)), ) %>%   mutate(group = row_number()) %>%   cross_join(groundwater) %>%   mutate(     total_flow = River_flow + Lake_flow + Wells_flow,     River_ratio = River_flow / total_flow,     Lake_ratio = Lake_flow / total_flow,     Wells_ratio = Wells_flow / total_flow   ) Wells_water <- tibble(wells = c(blended_wells_water))  River_water <- tibble(   ph = 7, temp = 20, alk = 200, tds = 950, cond = 1400,   tot_hard = 300, na = 100, cl = 150, so4 = 200 ) %>%   define_water_df() %>%   balance_ions_df(output_water = \"river\") %>%   select(-defined)  Lake_water <- tibble(   ph = 7.5, temp = 19, alk = 180, tds = 900, cond = 1000,   tot_hard = 350, ca_hard = 250, na = 100, cl = 100, so4 = 150 ) %>%   define_water_df() %>%   balance_ions_df(output_water = \"lake\") %>%   select(-defined)"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/articles/help_functions_blend_waters.html","id":"blending-multiple-sources","dir":"Articles","previous_headings":"","what":"Blending multiple sources","title":"Blending Multiple Waters","text":"Now 3 sources defined, balanced, cleaned , can blend . next code chunk showcases power working data frame. ’ll use blend_waters_df, helper function blend_waters. already created water class columns , ’ll use column names waters argument. ratios water source calculated scenarios data frame. ’ll pass names ratio columns ratio argument. ratios must always add 1, otherwise function run. three source waters blended tested scenario, can pull parameter interest using pluck_water. Finally, finish plotting parameter interest ggplot package.","code":"blend_water <- scenarios %>%   cross_join(Wells_water) %>%   cross_join(River_water) %>%   cross_join(Lake_water) %>%   blend_waters_df(     waters = c(\"wells\", \"river\", \"lake\"),     ratios = c(\"Wells_ratio\", \"River_ratio\", \"Lake_ratio\")   ) plotting_data <- blend_water %>%   pluck_water(input_water = \"blended\", \"tot_hard\")  # Plot the results! ggplot(plotting_data, aes(x = total_flow, y = blended_tot_hard, color = as.character(Wells_flow))) +   geom_point() +   labs(     y = \"Hardness (mg/L as CaCO3)\", color = \"Well Flow (MGD)\",     x = \"Total Plant Flow (MGD)\"   )"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/articles/help_functions_blend_waters.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Blending Multiple Waters","text":"tutorial, learned use blend_waters function determine resulting water quality multipled mixed sources. function inputs water objects blending ratios, outputs new column storing updated parameters class water. also got practice using helper functions _df suffix also pluck_water. context helper functions learn chemdose_ph solvedose_ph functions, please see vignette(\"help_functions_chemdose_ph\", package = \"tidywater\").","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/articles/help_functions_chemdose_ph.html","id":"chemical-dosing-setup","dir":"Articles","previous_headings":"","what":"Chemical dosing setup","title":"Helper Functions & Dose Chemicals","text":"showcase tidywater’s acid-base equilibrium functions, let’s use common water treatment problem. analysis, hypothetical drinking water utility wants know much pH impacted varying doses alum. also want ensure finished water pH 8. can create quick model manually inputting utility’s typical water quality. ’ll dose water typical alum dose 30 mg/L, proposed 20mg/L dose. Finally, ’ll see much caustic required raise pH back 8. expected, lower alum dose requires lower caustic dose reach target pH. Note: can remember difference solvedose_ph vs chemdose_ph? function beginning “solve” named solving based one input: SolveWhatItReturns_Input. , solvedose_ph solving dose based target pH. treatment functions set WhatHappensToTheWater_WhatYouSolveFor. chemdose_ph, chemicals dosed, ’re solving resulting pH (components acid/base chemistry). chemdose_toc models resulting TOC chemicals added, dissolve_pb calculates lead solubility distribution system.","code":"# Use define_water to prepare for tidywater analysis no_alum_water <- define_water(ph = 8.3, temp = 18, alk = 150)  # Dose 30 mg/L of alum alum_30 <- no_alum_water %>%   chemdose_ph(alum = 30) %>%   solvedose_ph(target_ph = 8, chemical = \"naoh\")  alum_30 # Caustic dose required to raise pH to 8 when 30 mg/L of alum is added ># [1] 10.3  # Dose 20 mg/L of alum alum_20 <- no_alum_water %>%   chemdose_ph(alum = 20) %>%   solvedose_ph(target_ph = 8, chemical = \"naoh\")  alum_20 # Caustic dose required to raise pH to 8 when 20 mg/L of alum is added ># [1] 6.2"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/articles/help_functions_chemdose_ph.html","id":"multi-scenario-setup-and-intro-to-_df-functions","dir":"Articles","previous_headings":"","what":"Multi-scenario setup and intro to _df functions","title":"Helper Functions & Dose Chemicals","text":"utility wants test variety alum doses range water quality? , ’ll use power tidywater’s _df functions extend analysis full dataframe. ’ll use tidywater’s built-water quality data, water_df, apply define_water_df convert data dataframe water object one column dataframe. use define_water_df models can added dataframe. function takes dataframe input, outputs parameters water class column. true tidywater functions _df suffix. _df functions handy piped code block ’ll need use many tidywater functions, chemdose_ph, chemdose_toc, etc. applying define_water_df, ’ll also use balance_ions_df create new variable ions balanced “raw” water objects dataframe. ’ll also set range alum doses see affect water quality scenario.","code":"# Set a range of alum doses  alum_doses <- tibble(alum_dose = seq(20, 60, 10))  # use tidywater's built-in synthetic data water_df, for this example raw_water <- water_df %>%   slice_head(n = 2) %>%   define_water_df(output_water = \"raw\") %>%   balance_ions_df(input_water = \"raw\") %>%   # join alum doses to create several dosing scenarios   cross_join(alum_doses)"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/articles/help_functions_chemdose_ph.html","id":"chemdose_ph_df-and-pluck_water","dir":"Articles","previous_headings":"","what":"chemdose_ph_df and pluck_water","title":"Helper Functions & Dose Chemicals","text":"Now ’re set , let’s dose alum! , ’ll use chemdose_ph_df, function _df suffix introduced earlier whose tidywater base chemdose_ph. chemdose_ph_df function requires dosed chemicals match argument’s notation specified calling function. tidywater chemicals named chemical formula, lowercase special characters. two ways dose chemicals. can pass appropriately named column function, can specify chemical function. Let’s look options using alum doses , adding hydrochloric acid. notice ouputs methods . Notice code used pluck_water helper function. function creates new column one selected parameter water class object. can choose water column pluck using input_water argument. Next, select parameter interest (must match water slot’s name). Finally, output column’s name default form water_parameter, option name using output_column argument. can also directly pull output model function column pluck_cols = TRUE don’t need apply pluck_water later.","code":"# 1. Use existing column in data frame to dose a chemical dose_water <- raw_water %>%   mutate(hcl = 5) %>%   chemdose_ph_df(input_water = \"raw\", alum = alum_dose, pluck_cols = TRUE) %>%   pluck_water(input_water = \"raw\", parameter = \"ph\") %>%   select(-c(raw, dosed_chem))  head(dose_water) >#                                                 balanced alum_dose hcl ># 1 <S4 class 'water' [package \"tidywater\"] with 75 slots>        20   5 ># 2 <S4 class 'water' [package \"tidywater\"] with 75 slots>        30   5 ># 3 <S4 class 'water' [package \"tidywater\"] with 75 slots>        40   5 ># 4 <S4 class 'water' [package \"tidywater\"] with 75 slots>        50   5 ># 5 <S4 class 'water' [package \"tidywater\"] with 75 slots>        60   5 ># 6 <S4 class 'water' [package \"tidywater\"] with 75 slots>        20   5 >#   dosed_chem_ph dosed_chem_alk raw_ph ># 1          6.60       33.04107    7.9 ># 2          6.42       27.96961    7.9 ># 3          6.25       22.98907    7.9 ># 4          6.07       17.92141    7.9 ># 5          5.87       12.96700    7.9 ># 6          6.93       62.87537    8.5  # 2. Dose a chemical in the function dose_water <- raw_water %>%   chemdose_ph_df(input_water = \"raw\", alum = alum_dose, hcl = 5) %>%   pluck_water(input_water = c(\"raw\", \"dosed_chem\"), parameter = \"ph\") %>%   select(-c(raw, dosed_chem))  head(dose_water) >#                                                 balanced alum_dose hcl raw_ph ># 1 <S4 class 'water' [package \"tidywater\"] with 75 slots>        20   5    7.9 ># 2 <S4 class 'water' [package \"tidywater\"] with 75 slots>        30   5    7.9 ># 3 <S4 class 'water' [package \"tidywater\"] with 75 slots>        40   5    7.9 ># 4 <S4 class 'water' [package \"tidywater\"] with 75 slots>        50   5    7.9 ># 5 <S4 class 'water' [package \"tidywater\"] with 75 slots>        60   5    7.9 ># 6 <S4 class 'water' [package \"tidywater\"] with 75 slots>        20   5    8.5 >#   dosed_chem_ph ># 1          6.60 ># 2          6.42 ># 3          6.25 ># 4          6.07 ># 5          5.87 ># 6          6.93"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/articles/help_functions_chemdose_ph.html","id":"solvedose_ph_df","dir":"Articles","previous_headings":"","what":"solvedose_ph_df","title":"Helper Functions & Dose Chemicals","text":"Remember, original task see alum addition affects pH, finished water pH needs 8. First, ’ll use caustic raise pH 8. solvedose_ph_df uses solvedose_ph calculate required chemical dose (chemical, product) based target pH. Similar chemdose_ph_df, solvedose_ph_df can handle chemical selection target pH inputs column function arguments. Now dose required raise pH 8, let’s dose caustic water! can see resulting pH dosing caustic raised pH 8 +/- 0.02 SU. Doses rounded nearest 0.1 mg/L make calculations go little faster.","code":"solve_ph <- raw_water %>%   chemdose_ph_df(\"raw\", alum = alum_dose) %>%   mutate(target_ph = 8) %>%   solvedose_ph_df(input_water = \"dosed_chem\", chemical = c(\"naoh\", \"mgoh2\")) %>%   select(-c(raw, dosed_chem))  head(solve_ph) >#                                                 balanced alum_dose target_ph ># 1 <S4 class 'water' [package \"tidywater\"] with 75 slots>        20         8 ># 2 <S4 class 'water' [package \"tidywater\"] with 75 slots>        30         8 ># 3 <S4 class 'water' [package \"tidywater\"] with 75 slots>        40         8 ># 4 <S4 class 'water' [package \"tidywater\"] with 75 slots>        50         8 ># 5 <S4 class 'water' [package \"tidywater\"] with 75 slots>        60         8 ># 6 <S4 class 'water' [package \"tidywater\"] with 75 slots>        20         8 >#   chemical dose ># 1     naoh  8.3 ># 2     naoh 12.3 ># 3     naoh 16.5 ># 4     naoh 20.5 ># 5     naoh 24.4 ># 6     naoh  6.3 dosed_caustic_water <- raw_water %>%   chemdose_ph_df(input_water = \"raw\", output_water = \"alum_dosed\", alum = alum_dose) %>%   solvedose_ph_df(input_water = \"alum_dosed\", target_ph = 8, chemical = \"naoh\") %>%   chemdose_ph_df(input_water = \"alum_dosed\", output_water = \"caustic_dosed\", naoh = dose) %>%   pluck_water(input_water = \"caustic_dosed\", \"ph\") %>%   select(-c(raw:balanced, alum_dosed))  head(dosed_caustic_water) >#   alum_dose target_ph chemical dose ># 1        20         8     naoh  8.3 ># 2        30         8     naoh 12.3 ># 3        40         8     naoh 16.5 ># 4        50         8     naoh 20.5 ># 5        60         8     naoh 24.4 ># 6        20         8     naoh  6.3 >#                                            caustic_dosed caustic_dosed_ph ># 1 <S4 class 'water' [package \"tidywater\"] with 75 slots>             7.99 ># 2 <S4 class 'water' [package \"tidywater\"] with 75 slots>             7.98 ># 3 <S4 class 'water' [package \"tidywater\"] with 75 slots>             8.00 ># 4 <S4 class 'water' [package \"tidywater\"] with 75 slots>             8.02 ># 5 <S4 class 'water' [package \"tidywater\"] with 75 slots>             8.01 ># 6 <S4 class 'water' [package \"tidywater\"] with 75 slots>             7.99"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/articles/help_functions_chemdose_ph.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Helper Functions & Dose Chemicals","text":"tutorial, introduced tidywater helper functions _df, can used apply base functions dataframe. also used pluck_water helper function pluck_cols argument extract parameters interest dataframes. implemented helper functions complete example dosing water coagulant (alum) adjusting resulting pH target pH 8 using solvedose_ph chemdose_ph functions. try another example helper functions learn blend_waters function, see vignette(\"blend_waters\", package = \"tidywater\").","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/articles/intro.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting started","title":"Introduction to tidywater: Basic functions","text":"tidywater package allows quickly model complex water quality treatment processes using R programming language. First, install tidywater package load library.","code":"library(tidywater)"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/articles/intro.html","id":"defining-a-water","dir":"Articles","previous_headings":"","what":"Defining a water","title":"Introduction to tidywater: Basic functions","text":"first step modelling project using tidywater define starting water quality. can done using define_water function. function allows input everything know water (pH, alkalinity, temperature, etc.). also standardizes units subsequent modelling steps, calculates carbonate balance alkalinity pH (provided), estimates ionic strength water inputs. function takes information creates unique object class “water” (details, see  R’s S4 class). “water” class building block tidywater allows keep track changes water various water treatment processes tidy way. Think “water” class snapshot everything known water step modelling process. tidywater depend special class instead just using data frame? water class good way standardize inputs set data structure reduce user error. Funneling users define_water reduces naming errors downstream functions. also ensures slots proper data class. example, ph must always number, treatment always character. start, let’s create blank water class call empty_water. Notice several warnings generated water class. define_water return warnings noting assumptions limitations water class depending much information provided. example, since provide information water’s pH alkalinity, carbonate balance calculated. Similarly, since provide information major ions water, information water’s hardness ionic strength missing. Even , successfully created first water class! can view first slots water class can contain printing empty_water. slots general parameters, carbon content, corrosivity indicators, major cations anions, disinfection byproducts (DBPs). Different functions within tidywater allow model parameters . let’s add things water already know. Let’s say know pH, alkalinity, temperature, sodium concentration. can define parameters arguments define_water, accepts pH (unitless), alkalinity units mg/L CaCO3, temperature degrees C, ions mg/L (exception bromide manganese, reported ug/L). function also refers chemical compounds chemical symbol formula. Let’s call new water class my_water. Notice slots ph, alk, temp, na, ca now populated, ’ll need use slot names see information. ions slots (na, ca) output units mol/L (M). can also see define_water automatically calculated amount carbonate (co3) bicarbonate (hco3) water based alkalinity pH. can easily summarize water quality using summarize_wq function, takes water class object exports easy--read table water quality console. great way get started tidywater users need model single water quality. large data set multiple water qualities want model, though, might sound tedious. wouldn’t possible manually enter pH, alkalinity, temperature, etc. , let’s say, 5,000 rows. Instead, tidywater helper functions generate many water classes simultaneously imported data set. See help_functions_blend vignette large data processing (paste console: vignette(\"help_functions_blend\", package = \"tidywater\")).","code":"empty_water <- define_water() #> Warning in define_water(): Missing value for pH. Carbonate balance will not be #> calculated. #> Warning in define_water(): Missing value for alkalinity. Carbonate balance will #> not be calculated. #> Warning in define_water(): Major ions missing and neither TDS or conductivity #> entered. Ideal conditions will be assumed. Ionic strength will be set to NA and #> activity coefficients in future calculations will be set to 1. print(empty_water) #> pH (unitless):  NA  #> Temperature (deg C):  25  #> Alkalinity (mg/L CaCO3):  NA  #> Use summary functions or slot names to view other parameters. my_water <- define_water(ph = 7.5, alk = 100, temp = 20, na = 50, ca = 50) my_water #> pH (unitless):  7.5  #> Temperature (deg C):  20  #> Alkalinity (mg/L CaCO3):  100  #> Use summary functions or slot names to view other parameters. my_water@na #> [1] 0.00217488 my_water@hco3 #> [1] 0.001992775 summarize_wq(my_water)"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/articles/intro.html","id":"plotting-and-balancing-ions","dir":"Articles","previous_headings":"","what":"Plotting and balancing ions","title":"Introduction to tidywater: Basic functions","text":"Back single use case, ’ll notice one warnings alerts user missing cations /anions, use balance_ions correct . based electroneutrality principle states charges cations anions water add 0. water missing ions, likely isn’t balanced. cause results model . check, can use plot_ions function water object see current ion balance looks like. can see cation anion bars equal, realistic.  correct , balance_ions function automatically adds sodium, potassium, chloride, sulfate anions + cations = 0. Let’s see happens ion plot use balance_ions estimate missing ion concentrations.  Great! balance_ions added chloride my_water now electrically neutral. see much chloride added, can use “@” symbol water class object access slot want, case, chloride","code":"plot_ions(my_water) balanced_water <- my_water %>% balance_ions() plot_ions(balanced_water) my_water@cl # We did not input any chloride in the original water #> [1] NA  balanced_water@cl # The balanced water now contains chloride #> [1] 0.004015285"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/articles/intro.html","id":"converting-units","dir":"Articles","previous_headings":"","what":"Converting units","title":"Introduction to tidywater: Basic functions","text":"chloride units M. want know mg/L? two ways tidywater. easiest way use summarize_wq function shown , converts ion concentrations back mg/L. Another option use convert_units function, allows specify chemical starting ending units. case, want convert chloride concentration balanced_water M mg/L.","code":"convert_units(value = balanced_water@cl, formula = \"cl\", startunit = \"M\", endunit = \"mg/L\") #> [1] 142.3539"},{"path":[]},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/articles/intro.html","id":"ionic-strength","dir":"Articles","previous_headings":"Modelling assumptions","what":"Ionic strength","title":"Introduction to tidywater: Basic functions","text":"possible, define_water calculate ionic strength water, either based TDS, conductivity, ions provided water. functions work fine don’t know ionic strength, especially comes pH chemistry, ’s good include information . Note original water, didn’t provide enough ions ionic strength determined. can remedy ways. couple assumptions define_water makes able set data downstream tidywater functions. include standard ratios hardness DOC.","code":"# The ionic strength slot was NA in the original water because we did not # provide enough information to calculate it my_water@is #> [1] NA  # Input TDS or conductivity new_water1 <- define_water(ph = 7.5, alk = 100, temp = 20, na = 50, ca = 50, tds = 100) #> Warning in define_water(ph = 7.5, alk = 100, temp = 20, na = 50, ca = 50, : #> Missing values for magnesium and total hardness but calcium supplied. Default #> ratio of 65% Ca2+ and 35% Mg2+ will be used. new_water2 <- define_water(ph = 7.5, alk = 100, temp = 20, na = 50, ca = 50, cond = 200) #> Warning in define_water(ph = 7.5, alk = 100, temp = 20, na = 50, ca = 50, : #> Missing values for magnesium and total hardness but calcium supplied. Default #> ratio of 65% Ca2+ and 35% Mg2+ will be used. # Input more known ions new_water3 <- define_water(ph = 7.5, alk = 100, temp = 20, na = 50, ca = 50, so4 = 100) #> Warning in define_water(ph = 7.5, alk = 100, temp = 20, na = 50, ca = 50, : #> Missing values for magnesium and total hardness but calcium supplied. Default #> ratio of 65% Ca2+ and 35% Mg2+ will be used.  new_water1@is #> [1] 0.0025 new_water2@is #> [1] 0.0032 new_water3@is #> [1] 0.008009908"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/articles/intro.html","id":"hardness","dir":"Articles","previous_headings":"Modelling assumptions","what":"Hardness","title":"Introduction to tidywater: Basic functions","text":"First, know total hardness water (tot_hard), calcium hardness (ca_hard) assumed 65% total, average  U.S. drinking water. ca_hard provided, tot_hard assumed equal calcium hardness/0.65. Magnesium hardness (mg_hard) calculated total hardness - calcium hardness. Let’s look using define_water. can use convert_units get output standard units hardness. defining total hardness, see water vector also contains estimates calcium magnesium.","code":"# Calculate hardness or calcium hardness hard_water <- define_water(8, 20, 100, tot_hard = 150)  # total hardness in mg/L CaCO3 hard_water@tot_hard #> [1] 150  # calcium hardness convert_units(value = hard_water@ca, formula = \"ca\", startunit = \"M\", endunit = \"mg/L CaCO3\") #> [1] 97.5  # magnesium hardness convert_units(value = hard_water@mg, formula = \"mg\", startunit = \"M\", endunit = \"mg/L CaCO3\") #> [1] 52.5"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/articles/intro.html","id":"total-and-dissolved-organic-carbon","dir":"Articles","previous_headings":"Modelling assumptions","what":"Total and dissolved organic carbon","title":"Introduction to tidywater: Basic functions","text":"TOC DOC inputs operate similarly hardness. TOC DOC important know modelling predicting various water treatment processes. know TOC, define_water applies standard conversion estimate DOC, vice versa. toc provided, doc assumed 95% TOC. doc provided, toc assumed DOC/0.95. ratio generally acceptable estimate drinking water scenarios, amount TOC dissolved raw waters vary widely. Westerhoff Anning, 2000 reported range 10-100% dissolved TOC 25 surface waters, keep mind standard conversion may right context. Overall, tidywater helps model scenarios little information possible often don’t data like, less assume water, better. ’s important understand list assumptions making modelling effort.","code":"# Calculate TOC and DOC toc_water <- define_water(8, 20, 100, toc = 3) toc_water@toc # mg/L #> [1] 3 toc_water@doc # mg/L #> [1] 2.85  doc_water <- define_water(8, 20, 100, doc = 1.3) doc_water@toc # mg/L #> [1] 1.368421 doc_water@doc # mg/L #> [1] 1.3"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/articles/intro.html","id":"summary-and-recommended-resources","dir":"Articles","previous_headings":"","what":"Summary and Recommended Resources","title":"Introduction to tidywater: Basic functions","text":"tutorial, introduced water object water quality parameters specified . added water quality data using define_water function, modified water meet electroneutrality principle balancing ions balance_ions. change also visualized using plot_ions. built-unit conversion function convert_units also introduced. Next, looked assumptions built model ionic strength, hardness, TOC/DOC able fill related water quality parameters based accepted practice empirical research order set future tidywater functions. Note fewer assumptions water, better prediction. Check vignettes learn tidywater’s functions modelling softening, coagulation, DBP formation. Please note many models included possible, however, users aware models varying degrees accuracy applicability. learn , read references provided Description file models implemented.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/articles/tidywater.html","id":"defining-an-example-water","dir":"Articles","previous_headings":"","what":"Defining an example water","title":"Getting started with tidywater","text":"tidywater functions required water object. Start creating water define_water. lot optional arguments correspond different water quality parameters. Start specifying everything know, least parameters relevant modeling want . Parameters lowercase use common abbreviations chemical formulas. aren’t sure correct argument name , check define_water documentation. Concentrations specified common units - usually mg/L ug/L depending parameter. Units also documentation, make sure check carefully familiar system. Now water, can apply treatment models . main models require water input usually output another water number. Functions tidywater follow naming convention treatmentapplied_parametersmodeled. example, want dose chemical see impact pH/alkalinity, use chemdose_ph. lot available chemicals, can view documentation. chemicals specified using chemical formula lowercase, except hydrated coagulants, named. Units chemical also specified, usually mg/L chemical.","code":"mywater <- define_water(   ph = 7, temp = 15, alk = 100, tot_hard = 100, na = 100, cl = 80,   cond = 100,   toc = 3, uv254 = .02, br = 50 ) #> Warning in define_water(ph = 7, temp = 15, alk = 100, tot_hard = 100, na = 100, #> : Missing values for calcium and magnesium but total hardness supplied. Default #> ratio of 65% Ca2+ and 35% Mg2+ will be used. #> Warning in define_water(ph = 7, temp = 15, alk = 100, tot_hard = 100, na = 100, #> : Missing value for DOC. Default value of 95% of TOC will be used."},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/articles/tidywater.html","id":"coagulation-model","dir":"Articles","previous_headings":"","what":"Coagulation model","title":"Getting started with tidywater","text":"First, let’s apply model predict effect coagulation given mywater conditions set earlier. Start determining impact adding 5 mg/L HCl 20 mg/L alum coagulant. Now dosed_water updated pH chemistry based hydrochloric acid alum doses. However, slots water, TOC, updated. also want know coagulant impacts TOC, need apply chemdose_toc well. function defaults published model coefficients, ’s empirical model, also select coefficients. two functions chemdose_ph chemdose_toc can also chained together using pipe operator %>% calculate changes pH TOC compactly. Notice pH DOC values returned piped_coag_water calculated coag_water. can also solve chemical doses achieve target pH solvedose_ph. function outputs number instead water.","code":"dosed_water <- chemdose_ph(mywater, hcl = 5, alum = 20) #> Warning in chemdose_ph(mywater, hcl = 5, alum = 20): Sulfate-containing #> chemical dosed, but so4 water slot is NA. Slot not updated because background #> so4 unknown. mywater@ph #> [1] 7 dosed_water@ph #> [1] 6.68 coag_water <- chemdose_toc(dosed_water, alum = 20)  dosed_water@doc #> [1] 2.85 coag_water@doc #> [1] 2.428063 piped_coag_water <- mywater %>%   chemdose_ph(hcl = 5, alum = 20) %>%   chemdose_toc(alum = 20) #> Warning in chemdose_ph(., hcl = 5, alum = 20): Sulfate-containing chemical #> dosed, but so4 water slot is NA. Slot not updated because background so4 #> unknown.  piped_coag_water@ph #> [1] 6.68 piped_coag_water@doc #> [1] 2.428063 caustic_req <- solvedose_ph(coag_water, target_ph = 8.6, chemical = \"naoh\")  fin_water <- chemdose_ph(coag_water, naoh = caustic_req)"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/articles/tidywater.html","id":"disinfection-model","dir":"Articles","previous_headings":"","what":"Disinfection model","title":"Getting started with tidywater","text":"can apply similar principals disinfection. Note specify chlorine dose mg/L Cl2 chemdose_ph chemdose_dbp calculating two different things. example, DBP function displays warnings water modeling outside bounds original model fitting. common, something always aware (even tidywater doesn’t warn ). can use summarize_wq view different groups parameters water.","code":"dist_water <- chemdose_ph(fin_water, naocl = 4) %>%   chemdose_dbp(cl2 = 4, time = 24, treatment = \"coag\") #> Warning in chemdose_dbp(., cl2 = 4, time = 24, treatment = \"coag\"): UV254 is #> outside the model bounds of 0.016 <= UV254 <= 0.215 cm-1 for coagulated water. #> Warning in chemdose_dbp(., cl2 = 4, time = 24, treatment = \"coag\"): Temperature #> is outside the model bounds of temp=20 Celsius for coagulated water. #> Warning in chemdose_dbp(., cl2 = 4, time = 24, treatment = \"coag\"): pH is #> outside the model bounds of pH = 7.5 for coagulated water  summarize_wq(dist_water, \"dbps\")"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/articles/tidywater.html","id":"summary-and-recommended-resources","dir":"Articles","previous_headings":"","what":"Summary and Recommended Resources","title":"Getting started with tidywater","text":"tutorial, walked set influent water conditions specifying water quality parameters using define_water function. , applied two common treatment models, coagulation disinfection, predicted effect chemical addition pH TOC /DBPs. functions return water object new water quality parameters, represent effluent water conditions. important note individual functions update water quality parameter. Changes pH TOC, example, require separate functions calculate, can chained together using pipe operator %>%. also functions can solve required chemical dose, solvedose_ph solves chemical dose needed achieve target pH value. Tidywater functions can also applied data frames using _df suffix. learn functions, look documentation read helper function vignette. want detailed introduction tidywater, check intro vignette.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sierra Johnson. Author, maintainer. Libby McKenna. Author. Riley Mulhern. Author. Chris Corwin. Author. Rachel Merrifield. Contributor. Mayuri Namasivayam. Contributor. Phoebe Chen. Contributor. Jiaming Yuan. Contributor. USEPA. Copyright holder.           Copyright holder included TELSS fragments (dissolve_pb function) Brown Caldwell. Funder, copyright holder.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Johnson S, McKenna L, Mulhern R, Corwin C (2025). tidywater: Water Quality Models Drinking Water Treatment Processes. R package version 0.10.9000, https://github.com/BrownandCaldwell-Public/tidywater.","code":"@Manual{,   title = {tidywater: Water Quality Models for Drinking Water Treatment Processes},   author = {Sierra Johnson and Libby McKenna and Riley Mulhern and Chris Corwin},   year = {2025},   note = {R package version 0.10.9000},   url = {https://github.com/BrownandCaldwell-Public/tidywater}, }"},{"path":[]},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Water Quality Models for Drinking Water Treatment Processes","text":"Tidywater incorporates published water chemistry empirical models standard format. modular functions allow building custom, comprehensive drinking water treatment processes. Functions designed work tidyverse workflow.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Water Quality Models for Drinking Water Treatment Processes","text":"","code":"# Install tidywater from CRAN: install.packages(\"tidywater\")  # Alternatively, install the development version from GitHub: # install.packages(\"devtools\") devtools::install_github(\"BrownandCaldwell-Public/tidywater\")"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Water Quality Models for Drinking Water Treatment Processes","text":"first example, acid-base chemistry TOC removal models demonstrated. example uses tidywater base functions model single water quality scenario. model multiple water quality scenarios, use tidywater’s helper functions (x_chain x_once) apply models dataframe. Note functions use “water” class. “water” class foundation package; provides mechanism linking models order maintaining water quality information. define_water function takes water quality inputs, define_water_chain may used convert dataframe list “waters”. detailed examples tidywater functions use “water” class data, please see tidywater vignettes: browseVignettes(\"tidywater\")","code":"library(tidywater) library(tidyverse) ## Use base tidywater functions to model water quality for a single scenario. base_coagulation <- define_water(ph = 8, alk = 90, tds = 50, toc = 3, doc = 2.8, uv254 = 0.08) %>%   chemdose_ph(alum = 30) %>%   chemdose_toc(alum = 30) #> Warning in chemdose_ph(., alum = 30): Sulfate-containing chemical dosed, but #> so4 water slot is NA. Slot not updated because background so4 unknown. ## x_chain functions apply models to a list of \"waters\", and output a list of \"waters\" so that ## the data can be piped into the next tidywater model. coagulation <- water_df %>%   define_water_chain(output_water = \"raw\") %>%   mutate(alum = 30) %>%   chemdose_ph_chain(input_water = \"raw\", output_water = \"phchange\") %>%   chemdose_toc_chain(input_water = \"phchange\", output_water = \"coag\") #> Warning: `chemdose_toc_chain()` was deprecated in tidywater 0.10.0. #> ℹ Please use `chemdose_toc_df()` instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. #> Warning: `chemdose_ph_chain()` was deprecated in tidywater 0.10.0. #> ℹ Please use `chemdose_ph_df()` instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. #> Warning: `define_water_chain()` was deprecated in tidywater 0.10.0. #> ℹ Please use `define_water_df()` instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated.  ## To get out individual parameters, use `pluck_water` coagulation <- coagulation %>%   pluck_water(input_waters = c(\"raw\", \"coag\"), parameter = c(\"ph\", \"doc\"))"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/index.html","id":"limitations","dir":"","previous_headings":"","what":"Limitations","title":"Water Quality Models for Drinking Water Treatment Processes","text":"project maintained volunteers provided without warranties guarantees kind. Use risk. official support, please contact Brown Caldwell. Please read CONTRIBUTING.md SECURITY.md submitting issues pull requests.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/balance_ions.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an ion to balance overall charge in a water — balance_ions","title":"Add an ion to balance overall charge in a water — balance_ions","text":"function takes water defined define_water balances charge. single water use balance_ions; dataframe use balance_ions_df. Use pluck_cols = TRUE get values output water new dataframe columns.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/balance_ions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an ion to balance overall charge in a water — balance_ions","text":"","code":"balance_ions(water, anion = \"cl\", cation = \"na\")  balance_ions_df(   df,   input_water = \"defined\",   output_water = \"balanced\",   pluck_cols = FALSE,   water_prefix = TRUE,   anion = \"cl\",   cation = \"na\" )"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/balance_ions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an ion to balance overall charge in a water — balance_ions","text":"water Water created define_water, may ions set 0 unknown anion Selected anion use ion balance cations present. Defaults \"cl\". Choose one c(\"cl\", \"so4\"). cation Selected cation use ion balance anions present. Defaults \"na\". Choose one c(\"na\", \"k\", \"ca\", \"mg\"). df data frame containing water class column, already computed using define_water_df input_water name column water class data used input function. Default \"defined_water\". output_water name output column storing updated water classes. Default \"balanced_water\". pluck_cols Extract water slots modified function (selected cation anion) new numeric columns easy access. Default FALSE. water_prefix Append output_water name start plucked columns. Default TRUE.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/balance_ions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an ion to balance overall charge in a water — balance_ions","text":"balance_ions returns single water class object updated ions balance water charge. balance_ions_df returns dataframe new column ion balanced water","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/balance_ions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add an ion to balance overall charge in a water — balance_ions","text":"cations needed, sodium added. User may specify cation (\"na\", \"k\", \"ca\", \"mg\") use balancing. calcium magnesium specified defining water define_water, default 0 changed function unless specified cation argument. Anions added default chloride. User may specify anion (\"cl\", \"so4\") use balancing. function purely mathematical. User always check outputs make sure values reasonable input source water.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/balance_ions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add an ion to balance overall charge in a water — balance_ions","text":"","code":"water_defined <- define_water(7, 20, 50, 100, 80, 10, 10, 10, 10) %>%   balance_ions() #> Warning: User entered total hardness is >10% different than calculated hardness.  water_defined <- define_water(7, 20, 50, tot_hard = 150) %>%   balance_ions(anion = \"so4\") #> Warning: Missing values for calcium and magnesium but total hardness supplied. Default ratio of 65% Ca2+ and 35% Mg2+ will be used. #> Warning: Major ions missing and neither TDS or conductivity entered. Ideal conditions will be assumed. Ionic strength will be set to NA and activity coefficients in future calculations will be set to 1.  example_df <- water_df %>%   define_water_df() %>%   balance_ions_df(anion = \"so4\", cation = \"ca\")"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/biofilter_toc.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine TOC removal from biofiltration using Terry & Summers BDOC model — biofilter_toc","title":"Determine TOC removal from biofiltration using Terry & Summers BDOC model — biofilter_toc","text":"function applies Terry model water created define_water determine biofiltered DOC (mg/L). particulate TOC assumed removed TOC = DOC. single water use biofilter_toc; dataframe use biofilter_toc_df. Use pluck_cols = TRUE get values output water new dataframe columns. arguments _df helper \"use_col\" default looks column name dataframe. argument can specified directly function instead unquoted column name can provided.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/biofilter_toc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine TOC removal from biofiltration using Terry & Summers BDOC model — biofilter_toc","text":"","code":"biofilter_toc(water, ebct, ozonated = TRUE)  biofilter_toc_df(   df,   input_water = \"defined\",   output_water = \"biofiltered\",   pluck_cols = FALSE,   water_prefix = TRUE,   ebct = \"use_col\",   ozonated = \"use_col\" )"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/biofilter_toc.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Determine TOC removal from biofiltration using Terry & Summers BDOC model — biofilter_toc","text":"Terry Summers 2018","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/biofilter_toc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine TOC removal from biofiltration using Terry & Summers BDOC model — biofilter_toc","text":"water Source water object class \"water\" created define_water. ebct empty bed contact time (min) used biofilter. ozonated Logical; TRUE water ozonated (default), FALSE otherwise. df data frame containing water class column, already computed using define_water_df. df may include column indicating EBCT whether water ozonated. input_water name column water class data used input function. Default \"defined\". output_water name output column storing updated water class object. Default \"biofiltered\". pluck_cols Extract water slots modified function (doc, toc, bdoc) new numeric columns easy access. Default FALSE. water_prefix Append output_water name start plucked columns. Default TRUE.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/biofilter_toc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine TOC removal from biofiltration using Terry & Summers BDOC model — biofilter_toc","text":"biofilter_toc returns water class object modeled DOC removal biofiltration. biofilter_toc_df returns data frame containing water class column updated DOC, TOC, BDOC concentrations. Optionally, also adds columns slots individually.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/biofilter_toc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine TOC removal from biofiltration using Terry & Summers BDOC model — biofilter_toc","text":"","code":"water <- define_water(ph = 7, temp = 25, alk = 100, toc = 5.0, doc = 4.0, uv254 = .1) %>%   biofilter_toc(ebct = 10, ozonated = FALSE) #> Warning: Major ions missing and neither TDS or conductivity entered. Ideal conditions will be assumed. Ionic strength will be set to NA and activity coefficients in future calculations will be set to 1.   example_df <- water_df %>%   define_water_df() %>%   biofilter_toc_df(input_water = \"defined\", ebct = c(10, 15), ozonated = FALSE)  example_df <- water_df %>%   define_water_df() %>%   dplyr::mutate(     BiofEBCT = c(10, 10, 10, 15, 15, 15, 20, 20, 20, 25, 25, 25),     ozonated = c(rep(TRUE, 6), rep(FALSE, 6))   ) %>%   biofilter_toc_df(input_water = \"defined\", ebct = BiofEBCT)"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/blend_waters.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine blended water quality from multiple waters based on mass balance and acid/base equilibrium — blend_waters","title":"Determine blended water quality from multiple waters based on mass balance and acid/base equilibrium — blend_waters","text":"function takes vector waters defined define_water vector ratios outputs new water object updated ions pH. single blend use blend_waters; dataframe use blend_waters_df. Use pluck_water get values output water new dataframe columns.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/blend_waters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine blended water quality from multiple waters based on mass balance and acid/base equilibrium — blend_waters","text":"","code":"blend_waters(waters, ratios)  blend_waters_df(df, waters, ratios, output_water = \"blended\")"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/blend_waters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine blended water quality from multiple waters based on mass balance and acid/base equilibrium — blend_waters","text":"waters Vector source waters created define_water. df function, can include quoted column names /existing single water objects unquoted. ratios Vector ratios order waters. (Blend ratios must sum 1). df function, can also list quoted column names. df data frame containing water class column, already computed using define_water_df output_water name output column storing updated parameters class, water. Default \"blended_water\".","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/blend_waters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine blended water quality from multiple waters based on mass balance and acid/base equilibrium — blend_waters","text":"blend_waters returns water class object blended water quality parameters. blend_waters_df returns data frame water class column containing blended water quality","code":""},{"path":[]},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/blend_waters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine blended water quality from multiple waters based on mass balance and acid/base equilibrium — blend_waters","text":"","code":"water1 <- define_water(7, 20, 50) #> Warning: Major ions missing and neither TDS or conductivity entered. Ideal conditions will be assumed. Ionic strength will be set to NA and activity coefficients in future calculations will be set to 1. water2 <- define_water(7.5, 20, 100, tot_nh3 = 2) #> Warning: Major ions missing and neither TDS or conductivity entered. Ideal conditions will be assumed. Ionic strength will be set to NA and activity coefficients in future calculations will be set to 1. blend_waters(c(water1, water2), c(.4, .6)) #> pH (unitless):  7.31  #> Temperature (deg C):  20  #> Alkalinity (mg/L CaCO3):  80  #> Use summary functions or slot names to view other parameters.   example_df <- water_df %>%   dplyr::slice_head(n = 3) %>%   define_water_df() %>%   chemdose_ph_df(naoh = 22) %>%   dplyr::mutate(     ratios1 = .4,     ratios2 = .6   ) %>%   blend_waters_df(     waters = c(\"defined\", \"dosed_chem\"),     ratios = c(\"ratios1\", \"ratios2\"), output_water = \"Blending_after_chemicals\"   )  # \\donttest{ waterA <- define_water(7, 20, 100, tds = 100) example_df <- water_df %>%   dplyr::slice_head(n = 3) %>%   define_water_df() %>%   blend_waters_df(waters = c(\"defined\", waterA), ratios = c(.8, .2)) #> Warning: The following parameters are missing in some of the waters and will be set to NA in the blend: #>    tot_hard, toc, doc, uv254, na, ca, mg, k, cl, so4 #> To fix this, make sure all waters provided have the same parameters specified. #> Warning: The following parameters are missing in some of the waters and will be set to NA in the blend: #>    tot_hard, toc, doc, uv254, na, ca, mg, k, cl, so4 #> To fix this, make sure all waters provided have the same parameters specified. #> Warning: The following parameters are missing in some of the waters and will be set to NA in the blend: #>    tot_hard, toc, doc, uv254, na, ca, mg, k, cl, so4 #> To fix this, make sure all waters provided have the same parameters specified. # }"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/bromatecoeffs.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame of bromate coefficients for predicting bromate formation during ozonation — bromatecoeffs","title":"Data frame of bromate coefficients for predicting bromate formation during ozonation — bromatecoeffs","text":"dataset containing coefficients calculating ozone formation","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/bromatecoeffs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame of bromate coefficients for predicting bromate formation during ozonation — bromatecoeffs","text":"","code":"bromatecoeffs"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/bromatecoeffs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data frame of bromate coefficients for predicting bromate formation during ozonation — bromatecoeffs","text":"dataframe 30 rows 10 columns model First author source model ammonia Either T F, depending whether model applies waters ammonia present. First coefficient bromate model Exponent bromate model, associated Br- b Exponent bromate model, associated DOC c Exponent bromate model, associated UVA d Exponent bromate model, associated pH e Exponent bromate model, associated Alkalinity f Exponent bromate model, associated ozone dose g Exponent bromate model, associated reaction time h Exponent bromate model, associated ammonia (NH4+) Exponent bromate model, associated temperature Coefficient bromate model, associated temperature exponent. Either used, .","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/bromatecoeffs.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data frame of bromate coefficients for predicting bromate formation during ozonation — bromatecoeffs","text":"Ozekin (1994), Sohn et al (2004), Song et al (1996), Galey et al (1997), Siddiqui et al (1994) See references list : https://github.com/BrownandCaldwell-Public/tidywater/wiki/References","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/calculate_activity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate activity coefficients — calculate_activity","title":"Calculate activity coefficients — calculate_activity","text":"function calculates activity coefficients given temperature based equation 5-43 Davies (1967), Crittenden et al. (2012)","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/calculate_activity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate activity coefficients — calculate_activity","text":"","code":"calculate_activity(z, is, temp)"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/calculate_activity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate activity coefficients — calculate_activity","text":"z Charge ions solution Ionic strength solution temp Temperature solution Celsius","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/calculate_activity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate activity coefficients — calculate_activity","text":"numeric value activity coefficient.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/calculate_activity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate activity coefficients — calculate_activity","text":"","code":"calculate_activity(2, 0.1, 25) #> [1] 0.3727232"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/calculate_corrosion.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate six corrosion and scaling indices (AI, RI, LSI, LI, CSMR, CCPP) — calculate_corrosion","title":"Calculate six corrosion and scaling indices (AI, RI, LSI, LI, CSMR, CCPP) — calculate_corrosion","text":"function takes object created define_water calculates corrosion scaling indices. single water, use calculate_corrosion; apply calculations dataframe, use calculate_corrosion_df.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/calculate_corrosion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate six corrosion and scaling indices (AI, RI, LSI, LI, CSMR, CCPP) — calculate_corrosion","text":"","code":"calculate_corrosion(   water,   index = c(\"aggressive\", \"ryznar\", \"langelier\", \"ccpp\", \"larsonskold\", \"csmr\"),   form = \"calcite\" )  calculate_corrosion_df(   df,   input_water = \"defined\",   water_prefix = TRUE,   index = c(\"aggressive\", \"ryznar\", \"langelier\", \"ccpp\", \"larsonskold\", \"csmr\"),   form = \"calcite\" )"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/calculate_corrosion.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Calculate six corrosion and scaling indices (AI, RI, LSI, LI, CSMR, CCPP) — calculate_corrosion","text":"AWWA (1977) Crittenden et al. (2012) Langelier (1936) Larson Skold (1958) Merrill Sanks (1977a) Merrill Sanks (1977b) Merrill Sanks (1978) Nguyen et al. (2011) Plummer Busenberg (1982) Ryznar (1944) Schock (1984) Trussell (1998) U.S. EPA (1980) See reference list https://github.com/BrownandCaldwell-Public/tidywater/wiki/References","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/calculate_corrosion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate six corrosion and scaling indices (AI, RI, LSI, LI, CSMR, CCPP) — calculate_corrosion","text":"water Source water class \"water\" created define_water index indices calculated. Default calculates six indices: \"aggressive\", \"ryznar\", \"langelier\", \"ccpp\", \"larsonskold\", \"csmr\" CCPP may able calculated sometimes, may advantageous leave function avoid errors form Form calcium carbonate mineral use modelling solubility: \"calcite\" (default), \"aragonite\", \"vaterite\" df data frame containing water class column, created using define_water input_water name column water class data used input. Default \"defined\". water_prefix append water name beginning output columns. Defaults TRUE","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/calculate_corrosion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate six corrosion and scaling indices (AI, RI, LSI, LI, CSMR, CCPP) — calculate_corrosion","text":"calculate_corrosion returns data frame corrosion scaling indices individual columns. calculate_corrosion_df returns data frame containing specified corrosion scaling indices columns.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/calculate_corrosion.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate six corrosion and scaling indices (AI, RI, LSI, LI, CSMR, CCPP) — calculate_corrosion","text":"Aggressiveness Index (AI), unitless - corrosive tendency water effect asbestos cement pipe. Ryznar Index (RI), unitless - measure scaling potential. Langelier Saturation Index (LSI), unitless - describes potential calcium carbonate scale formation. Equations use empirical calcium carbonate solubilities Plummer Busenberg (1982) Crittenden et al. (2012) rather calculated concentrations calcium carbonate water. Larson-skold Index (LI), unitless - describes corrosivity towards mild steel. Chloride--sulfate mass ratio (CSMR), mg Cl/mg SO4 - indicator galvanic corrosion lead solder pipe joints. Calcium carbonate precipitation potential (CCPP), mg/L CaCO3 - prediction mass calcium carbonate precipitate equilibrium. positive CCPP value indicates amount CaCO3 (mg/L CaCO3) precipitate. negative CCPP indicates much CaCO3 can dissolved water.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/calculate_corrosion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate six corrosion and scaling indices (AI, RI, LSI, LI, CSMR, CCPP) — calculate_corrosion","text":"","code":"water <- define_water(   ph = 8, temp = 25, alk = 200, tot_hard = 200,   tds = 576, cl = 150, so4 = 200 ) #> Warning: Missing values for calcium and magnesium but total hardness supplied. Default ratio of 65% Ca2+ and 35% Mg2+ will be used. corrosion_indices <- calculate_corrosion(water) #> Warning: Calcium estimated by previous tidywater function, aggressiveness index calculation approximate.  water <- define_water(ph = 8, temp = 25, alk = 100, tot_hard = 50, tds = 200) #> Warning: Missing values for calcium and magnesium but total hardness supplied. Default ratio of 65% Ca2+ and 35% Mg2+ will be used. corrosion_indices <- calculate_corrosion(water, index = c(\"aggressive\", \"ccpp\")) #> Warning: Calcium estimated by previous tidywater function, aggressiveness index calculation approximate.   example_df <- water_df %>%   define_water_df() %>%   calculate_corrosion_df(index = c(\"aggressive\", \"ccpp\"))"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/calculate_hardness.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate hardness from calcium and magnesium — calculate_hardness","title":"Calculate hardness from calcium and magnesium — calculate_hardness","text":"function takes Ca Mg mg/L returns hardness mg/L CaCO3","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/calculate_hardness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate hardness from calcium and magnesium — calculate_hardness","text":"","code":"calculate_hardness(ca, mg, type = \"total\", startunit = \"mg/L\")"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/calculate_hardness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate hardness from calcium and magnesium — calculate_hardness","text":"ca Calcium concentration mg/L Ca mg Magnesium concentration mg/L Mg type \"total\" returns total hardness, \"ca\" returns calcium hardness. Defaults \"total\" startunit Units Ca Mg. Defaults mg/L","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/calculate_hardness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate hardness from calcium and magnesium — calculate_hardness","text":"numeric value total hardness mg/L CaCO3.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/calculate_hardness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate hardness from calcium and magnesium — calculate_hardness","text":"","code":"calculate_hardness(50, 10) #> [1] 166.0447  water_defined <- define_water(7, 20, 50, 100, 80, 10, 10, 10, 10, tot_po4 = 1) #> Warning: User entered total hardness is >10% different than calculated hardness. calculate_hardness(water_defined@ca, water_defined@mg, \"total\", \"M\") #> [1] 240.9638"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/chemdose_chloramine.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate chlorine and chloramine Concentrations with the breakpoint cblorination approach — chemdose_chloramine","title":"Calculate chlorine and chloramine Concentrations with the breakpoint cblorination approach — chemdose_chloramine","text":"chemdose_chloramine, adopted U.S. EPA's Chlorine Breakpoint Curve Simulator, calculates chlorine chloramine concentrations based two papers Jafvert & Valentine (Environ. Sci. Technol., 1992, 26 (3), pp 577-586) Vikesland et al. (Water Res., 2001, 35 (7), pp 1766-1776). Required arguments include object class \"water\" created define_water, chlorine dose, reaction time. function also requires additional water quality parameters defined define_water including temperature, pH, alkalinity. single water use chemdose_chloramine; dataframe use chemdose_chloramine_df. Use pluck_cols = TRUE get values output water new dataframe columns. arguments _df helper \"use_col\" default looks column name dataframe. argument can specified directly function instead unquoted column name can provided.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/chemdose_chloramine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate chlorine and chloramine Concentrations with the breakpoint cblorination approach — chemdose_chloramine","text":"","code":"chemdose_chloramine(   water,   time,   cl2 = 0,   nh3 = 0,   use_free_cl_slot = FALSE,   use_tot_nh3_slot = FALSE )  chemdose_chloramine_df(   df,   input_water = \"defined\",   output_water = \"chloraminated\",   pluck_cols = FALSE,   water_prefix = TRUE,   time = \"use_col\",   cl2 = \"use_col\",   nh3 = \"use_col\",   use_free_cl_slot = \"use_col\",   use_tot_nh3_slot = \"use_col\" )"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/chemdose_chloramine.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Calculate chlorine and chloramine Concentrations with the breakpoint cblorination approach — chemdose_chloramine","text":"See references list : https://github.com/BrownandCaldwell-Public/tidywater/wiki/References","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/chemdose_chloramine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate chlorine and chloramine Concentrations with the breakpoint cblorination approach — chemdose_chloramine","text":"water Source water object class \"water\" created define_water time Reaction time (minutes). Time defined needs greater equal 1 minute. cl2 Applied chlorine dose (mg/L Cl2), defaults 0.specified, use free_chlorine slot water. nh3 Applied ammonia dose (mg/L N), defaults 0. specified, use tot_nh3 slot water. use_free_cl_slot Defaults FALSE. TRUE, uses free_chlorine slot water. TRUE cl2 input, free_chlorine water slot chlorine dose used. use_tot_nh3_slot Defaults FALSE. TRUE, uses tot_nh3 slot water. TRUE nh3 input, tot_nh3 water slot ammonia dose used. df data frame containing water class column, already computed using define_water_df. df may include column named applied chlorine dose (cl2_dose), column time hours. input_water name column water class data used input function. Default \"defined\". output_water name output column storing updated water class object. Default \"chloraminated\". pluck_cols Extract water slots modified function (\"free_chlorine\", \"nh2cl\", \"nhcl2\", \"ncl3\", \"combined_chlorine\", \"tot_nh3\") new numeric columns easy access. Default FALSE. water_prefix Append output_water name start plucked columns. Default TRUE.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/chemdose_chloramine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate chlorine and chloramine Concentrations with the breakpoint cblorination approach — chemdose_chloramine","text":"chemdose_chloramine returns water class object predicted chlorine chloramine concentrations. chemdose_chloramine_df returns data frame containing water class column updated chlorine/chloramine slots: free_chlorine, nh2cl, nhcl2, ncl3, combined_chlorine, tot_nh3. Optionally, also adds columns slots individually.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/chemdose_chloramine.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate chlorine and chloramine Concentrations with the breakpoint cblorination approach — chemdose_chloramine","text":"","code":"breakpoint <- define_water(7.5, 20, 65, free_chlorine = 5, tot_nh3 = 1) %>%   chemdose_chloramine(time = 40, cl2 = 2, nh3 = 1, use_free_cl_slot = TRUE) #> Warning: Both chlorine and ammonia are present and may form chloramines. #> Use chemdose_chloramine for breakpoint caclulations. #> Warning: Major ions missing and neither TDS or conductivity entered. Ideal conditions will be assumed. Ionic strength will be set to NA and activity coefficients in future calculations will be set to 1. #> Warning: Chlorine dose and free chlorine slot in water (0.000071 mol/L) were BOTH used. #>             If you want to use ONLY the chlorine dose, please set use_free_cl_slot to FALSE. #>             If you want to use ONLY the free chlorine water slot, remove chlorine dose. #> Warning: Ammonia dose was used as the initial free ammonia. tot_nh3 slot in water (0.000071 mol/L) was ignored. #>               If you want to use ONLY tot_nh3 slot in water, please set use_tot_nh3_slot to TRUE and remove ammonia dose. #>               If you want to use BOTH tot_nh3 slot in water and ammonia dose, use_tot_nh3_slot to TRUE.  # \\donttest{ breakpoint <- water_df %>%   dplyr::mutate(free_chlorine = 5, tot_nh3 = 1) %>%   define_water_df() %>%   dplyr::mutate(     time = 8,     cl2dose = rep(c(2, 3, 4), 4)   ) %>%   chemdose_chloramine_df(     output_water = \"final\",     cl2 = cl2dose,     use_free_cl_slot = TRUE,     use_tot_nh3_slot = TRUE,     pluck_cols = TRUE   ) #> Warning: Both chlorine and ammonia are present and may form chloramines. #> Use chemdose_chloramine for breakpoint caclulations. #> Warning: Both chlorine and ammonia are present and may form chloramines. #> Use chemdose_chloramine for breakpoint caclulations. #> Warning: Both chlorine and ammonia are present and may form chloramines. #> Use chemdose_chloramine for breakpoint caclulations. #> Warning: Both chlorine and ammonia are present and may form chloramines. #> Use chemdose_chloramine for breakpoint caclulations. #> Warning: Both chlorine and ammonia are present and may form chloramines. #> Use chemdose_chloramine for breakpoint caclulations. #> Warning: Both chlorine and ammonia are present and may form chloramines. #> Use chemdose_chloramine for breakpoint caclulations. #> Warning: Both chlorine and ammonia are present and may form chloramines. #> Use chemdose_chloramine for breakpoint caclulations. #> Warning: Both chlorine and ammonia are present and may form chloramines. #> Use chemdose_chloramine for breakpoint caclulations. #> Warning: Both chlorine and ammonia are present and may form chloramines. #> Use chemdose_chloramine for breakpoint caclulations. #> Warning: Both chlorine and ammonia are present and may form chloramines. #> Use chemdose_chloramine for breakpoint caclulations. #> Warning: Both chlorine and ammonia are present and may form chloramines. #> Use chemdose_chloramine for breakpoint caclulations. #> Warning: Both chlorine and ammonia are present and may form chloramines. #> Use chemdose_chloramine for breakpoint caclulations. #> Warning: Chlorine dose and free chlorine slot in water (0.000071 mol/L) were BOTH used. #>             If you want to use ONLY the chlorine dose, please set use_free_cl_slot to FALSE. #>             If you want to use ONLY the free chlorine water slot, remove chlorine dose. #> Warning: Chlorine dose and free chlorine slot in water (0.000071 mol/L) were BOTH used. #>             If you want to use ONLY the chlorine dose, please set use_free_cl_slot to FALSE. #>             If you want to use ONLY the free chlorine water slot, remove chlorine dose. #> Warning: Chlorine dose and free chlorine slot in water (0.000071 mol/L) were BOTH used. #>             If you want to use ONLY the chlorine dose, please set use_free_cl_slot to FALSE. #>             If you want to use ONLY the free chlorine water slot, remove chlorine dose. #> Warning: Chlorine dose and free chlorine slot in water (0.000071 mol/L) were BOTH used. #>             If you want to use ONLY the chlorine dose, please set use_free_cl_slot to FALSE. #>             If you want to use ONLY the free chlorine water slot, remove chlorine dose. #> Warning: Chlorine dose and free chlorine slot in water (0.000071 mol/L) were BOTH used. #>             If you want to use ONLY the chlorine dose, please set use_free_cl_slot to FALSE. #>             If you want to use ONLY the free chlorine water slot, remove chlorine dose. #> Warning: Chlorine dose and free chlorine slot in water (0.000071 mol/L) were BOTH used. #>             If you want to use ONLY the chlorine dose, please set use_free_cl_slot to FALSE. #>             If you want to use ONLY the free chlorine water slot, remove chlorine dose. #> Warning: Chlorine dose and free chlorine slot in water (0.000071 mol/L) were BOTH used. #>             If you want to use ONLY the chlorine dose, please set use_free_cl_slot to FALSE. #>             If you want to use ONLY the free chlorine water slot, remove chlorine dose. #> Warning: Chlorine dose and free chlorine slot in water (0.000071 mol/L) were BOTH used. #>             If you want to use ONLY the chlorine dose, please set use_free_cl_slot to FALSE. #>             If you want to use ONLY the free chlorine water slot, remove chlorine dose. #> Warning: Chlorine dose and free chlorine slot in water (0.000071 mol/L) were BOTH used. #>             If you want to use ONLY the chlorine dose, please set use_free_cl_slot to FALSE. #>             If you want to use ONLY the free chlorine water slot, remove chlorine dose. #> Warning: Chlorine dose and free chlorine slot in water (0.000071 mol/L) were BOTH used. #>             If you want to use ONLY the chlorine dose, please set use_free_cl_slot to FALSE. #>             If you want to use ONLY the free chlorine water slot, remove chlorine dose. #> Warning: Chlorine dose and free chlorine slot in water (0.000071 mol/L) were BOTH used. #>             If you want to use ONLY the chlorine dose, please set use_free_cl_slot to FALSE. #>             If you want to use ONLY the free chlorine water slot, remove chlorine dose. #> Warning: Chlorine dose and free chlorine slot in water (0.000071 mol/L) were BOTH used. #>             If you want to use ONLY the chlorine dose, please set use_free_cl_slot to FALSE. #>             If you want to use ONLY the free chlorine water slot, remove chlorine dose. # }"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/chemdose_chlordecay.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate chlorine decay — chemdose_chlordecay","title":"Calculate chlorine decay — chemdose_chlordecay","text":"calculates decay chlorine chloramine based U.S. EPA's Water Treatment Plant Model (U.S. EPA, 2001). single water use chemdose_chlordecay; dataframe use chemdose_chlordecay_df. Use pluck_cols = TRUE get values output water new dataframe columns. arguments _df helper \"use_col\" default looks column name dataframe. argument can specified directly function instead unquoted column name can provided.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/chemdose_chlordecay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate chlorine decay — chemdose_chlordecay","text":"","code":"chemdose_chlordecay(   water,   cl2_dose,   time,   treatment = \"raw\",   cl_type = \"chlorine\",   use_chlorine_slot = FALSE )  chemdose_chlordecay_df(   df,   input_water = \"defined\",   output_water = \"disinfected\",   pluck_cols = FALSE,   water_prefix = TRUE,   cl2_dose = \"use_col\",   time = \"use_col\",   treatment = \"use_col\",   cl_type = \"use_col\",   use_chlorine_slot = \"use_col\" )"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/chemdose_chlordecay.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Calculate chlorine decay — chemdose_chlordecay","text":"U.S. EPA (2001) See references list : https://github.com/BrownandCaldwell-Public/tidywater/wiki/References","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/chemdose_chlordecay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate chlorine decay — chemdose_chlordecay","text":"water Source water object class \"water\" created define_water cl2_dose Applied chlorine chloramine dose (mg/L cl2). Model results valid doses 0.995 41.7 mg/L raw water, doses 1.11 24.7 mg/L coagulated water. time Reaction time (hours). Chlorine decay model results valid reaction times 0.25 120 hours.Chloramine decay model specified boundary conditions. treatment Type treatment applied water. Options include \"raw\" treatment (default), \"coag\" water coagulated softened. cl_type Type chlorination applied, either \"chlorine\" (default) \"chloramine\". use_chlorine_slot Defaults FALSE. TRUE, uses either free_chlorine combined_chlorine slot water (depending cl_type). 'cl2_dose' argument, specified, chlorine slot used. 'cl2_dose' specified use_chlorine_slot TRUE, chlorine summed. df data frame containing water class column, already computed using define_water_df. df may include column named applied chlorine dose (cl2), column time hours. input_water name column water class data used input function. Default \"defined\". output_water name output column storing updated water class object. Default \"disinfected\". pluck_cols Extract water slots modified function (free_chlorine, combined_chlorine) new numeric columns easy access. Default FALSE. water_prefix Append output_water name start plucked columns. Default TRUE.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/chemdose_chlordecay.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate chlorine decay — chemdose_chlordecay","text":"chemdose_chlordecay returns updated disinfectant residual free_chlorine combined_chlorine water slot units M. Use convert_units convert mg/L. chemdose_chlordecay_df returns data frame containing water class column updated free_chlorine combined_chlorine residuals. Optionally, also adds columns slots individually.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/chemdose_chlordecay.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate chlorine decay — chemdose_chlordecay","text":"Required arguments include object class \"water\" created define_water, applied chlorine/chloramine dose, type, reaction time, treatment applied (options include \"raw\" treatment, \"coag\" coagulated water). function also requires additional water quality parameters defined define_water including TOC UV254. output new \"water\" class calculated total chlorine value stored 'free_chlorine' 'combined_chlorine' slot, depending type chlorine dosed. modeling residual concentrations unit process, U.S. EPA Water Treatment Plant Model applies correction factor based influent effluent residual concentrations (see U.S. EPA (2001) equation 5-118) may need applied manually user based output.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/chemdose_chlordecay.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate chlorine decay — chemdose_chlordecay","text":"","code":"example_cl2 <- define_water(8, 20, 66, toc = 4, uv254 = 0.2) %>%   chemdose_chlordecay(cl2_dose = 2, time = 8) #> Warning: Missing value for DOC. Default value of 95% of TOC will be used. #> Warning: Major ions missing and neither TDS or conductivity entered. Ideal conditions will be assumed. Ionic strength will be set to NA and activity coefficients in future calculations will be set to 1.  example_cl2 <- define_water(8, 20, 66, toc = 4, uv254 = 0.2, free_chlorine = 3) %>%   chemdose_chlordecay(cl2_dose = 2, time = 8, use_chlorine_slot = TRUE) #> Warning: Chlorine dose was summed with residual chlorine in the water object. If this is not intended, either do not specify 'cl_dose' or use 'use_chlorine_slot = FALSE'. #> Warning: Missing value for DOC. Default value of 95% of TOC will be used. #> Warning: Major ions missing and neither TDS or conductivity entered. Ideal conditions will be assumed. Ionic strength will be set to NA and activity coefficients in future calculations will be set to 1.  # \\donttest{  example_df <- water_df %>%   dplyr::mutate(br = 50) %>%   define_water_df() %>%   chemdose_chlordecay_df(input_water = \"defined\", cl2_dose = 4, time = 8) #> Warning: Existing 'free_chlorine' slot will be overridden based on recent dose. To sum results instead, set 'use_chlorine_slot = TRUE'. #> Warning: Existing 'free_chlorine' slot will be overridden based on recent dose. To sum results instead, set 'use_chlorine_slot = TRUE'. #> Warning: Existing 'free_chlorine' slot will be overridden based on recent dose. To sum results instead, set 'use_chlorine_slot = TRUE'. #> Warning: Existing 'free_chlorine' slot will be overridden based on recent dose. To sum results instead, set 'use_chlorine_slot = TRUE'. #> Warning: Existing 'free_chlorine' slot will be overridden based on recent dose. To sum results instead, set 'use_chlorine_slot = TRUE'. #> Warning: Existing 'free_chlorine' slot will be overridden based on recent dose. To sum results instead, set 'use_chlorine_slot = TRUE'.  example_df <- water_df %>%   dplyr::mutate(     br = 50,     free_chlorine = 2   ) %>%   define_water_df() %>%   dplyr::mutate(     cl2_dose = seq(2, 24, 2),     ClTime = 30   ) %>%   chemdose_chlordecay_df(     time = ClTime,     use_chlorine_slot = TRUE,     treatment = \"coag\",     cl_type = \"chloramine\",     pluck_cols = TRUE   ) #> Warning: Chlorine dose was summed with residual chlorine in the water object. If this is not intended, either do not specify 'cl_dose' or use 'use_chlorine_slot = FALSE'. #> Warning: Chlorine dose was summed with residual chlorine in the water object. If this is not intended, either do not specify 'cl_dose' or use 'use_chlorine_slot = FALSE'. #> Warning: Chlorine dose was summed with residual chlorine in the water object. If this is not intended, either do not specify 'cl_dose' or use 'use_chlorine_slot = FALSE'. #> Warning: Chlorine dose was summed with residual chlorine in the water object. If this is not intended, either do not specify 'cl_dose' or use 'use_chlorine_slot = FALSE'. #> Warning: Chlorine dose was summed with residual chlorine in the water object. If this is not intended, either do not specify 'cl_dose' or use 'use_chlorine_slot = FALSE'. #> Warning: Chlorine dose was summed with residual chlorine in the water object. If this is not intended, either do not specify 'cl_dose' or use 'use_chlorine_slot = FALSE'. #> Warning: Chlorine dose was summed with residual chlorine in the water object. If this is not intended, either do not specify 'cl_dose' or use 'use_chlorine_slot = FALSE'. #> Warning: Chlorine dose was summed with residual chlorine in the water object. If this is not intended, either do not specify 'cl_dose' or use 'use_chlorine_slot = FALSE'. #> Warning: Chlorine dose was summed with residual chlorine in the water object. If this is not intended, either do not specify 'cl_dose' or use 'use_chlorine_slot = FALSE'. #> Warning: Chlorine dose was summed with residual chlorine in the water object. If this is not intended, either do not specify 'cl_dose' or use 'use_chlorine_slot = FALSE'. #> Warning: Chlorine dose was summed with residual chlorine in the water object. If this is not intended, either do not specify 'cl_dose' or use 'use_chlorine_slot = FALSE'. #> Warning: Chlorine dose was summed with residual chlorine in the water object. If this is not intended, either do not specify 'cl_dose' or use 'use_chlorine_slot = FALSE'. # }"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/chemdose_dbp.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate DBP formation — chemdose_dbp","title":"Calculate DBP formation — chemdose_dbp","text":"Calculates disinfection byproduct (DBP) formation based U.S. EPA's Water Treatment Plant Model (U.S. EPA, 2001). Required arguments include object class \"water\" created define_water chlorine dose, type, reaction time, treatment applied (). function also requires additional water quality parameters defined define_water including bromide, TOC, UV254, temperature, pH. single water use chemdose_dbp; dataframe use chemdose_dbp_df. Use pluck_cols = TRUE get values output water new dataframe columns. arguments _df helper \"use_col\" default looks column name dataframe. argument can specified directly function instead unquoted column name can provided.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/chemdose_dbp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate DBP formation — chemdose_dbp","text":"","code":"chemdose_dbp(   water,   cl2,   time,   treatment = \"raw\",   cl_type = \"chorine\",   location = \"plant\",   correction = TRUE,   coeff = NULL )  chemdose_dbp_df(   df,   input_water = \"defined\",   output_water = \"disinfected\",   pluck_cols = FALSE,   water_prefix = TRUE,   cl2 = \"use_col\",   time = \"use_col\",   treatment = \"use_col\",   cl_type = \"use_col\",   location = \"use_col\",   correction = TRUE,   coeff = NULL )"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/chemdose_dbp.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Calculate DBP formation — chemdose_dbp","text":"TTHMs, raw: U.S. EPA (2001) equation 5-131 HAAs, raw: U.S. EPA (2001) equation 5-134 TTHMs, treated: U.S. EPA (2001) equation 5-139 HAAs, treated: U.S. EPA (2001) equation 5-142 See references list : https://github.com/BrownandCaldwell-Public/tidywater/wiki/References","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/chemdose_dbp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate DBP formation — chemdose_dbp","text":"water Source water object class \"water\" created define_water cl2 Applied chlorine dose (mg/L Cl2). Model results valid doses 1.51 33.55 mg/L. time Reaction time (hours). Model results valid reaction times 2 168 hours. treatment Type treatment applied water. Options include \"raw\" treatment (default), \"coag\" water coagulated softened, \"gac\" water treated granular activated carbon (GAC). GAC treatment also used estimating formation membrane treatment good results. cl_type Type chlorination applied, either \"chlorine\" (default) \"chloramine\". location Location DBP formation, either \"plant\" (default), distributions system, \"ds\". correction Model calculations adjusted based location cl_type. Default value TRUE. coeff Optional input specify custom coefficients dbp model. Must data frame following columns: ID, corresponding coefficients , , b, c, d, e, f, ph_const dbp interest. Default value NULL. df data frame containing water class column, already computed using define_water. df may include columns function arguments. input_water name column water class data used input function. Default \"defined\". output_water name output column storing updated water class object. Default \"disinfected\". pluck_cols Extract primary water slots modified function (tthm, haa5) new numeric columns easy access TRUE. Alternatively, specify \"\" get DBP species addition: (tthm, chcl3, chcl2br, chbr2cl, chbr3, haa5, mcaa, dcaa, tcaa, mbaa, dbaa) Defaults FALSE. water_prefix Append output_water name start plucked columns. Default TRUE.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/chemdose_dbp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate DBP formation — chemdose_dbp","text":"chemdose_dbp returns single water class object predicted DBP concentrations. chemdose_dbp_df returns data frame containing water class column updated tthm, chcl3, chcl2br, chbr2cl, chbr3, haa5, mcaa, dcaa, tcaa, mbaa, dbaa concentrations. Optionally, also adds columns slots individually.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/chemdose_dbp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate DBP formation — chemdose_dbp","text":"function calculate haloacetic acids (HAA) HAA5, total trihalomethanes (TTHM). Use summarize_wq(water, params = c(\"dbps\")) quickly tabulate results.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/chemdose_dbp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate DBP formation — chemdose_dbp","text":"","code":"example_dbp <- define_water(8, 20, 66, toc = 4, uv254 = .2, br = 50) %>%   chemdose_dbp(cl2 = 2, time = 8) #> Warning: Missing value for DOC. Default value of 95% of TOC will be used. #> Warning: Major ions missing and neither TDS or conductivity entered. Ideal conditions will be assumed. Ionic strength will be set to NA and activity coefficients in future calculations will be set to 1. example_dbp <- define_water(7.5, 20, 66, toc = 4, uv254 = .2, br = 50) %>%   chemdose_dbp(cl2 = 3, time = 168, treatment = \"coag\", location = \"ds\") #> Warning: Missing value for DOC. Default value of 95% of TOC will be used. #> Warning: Major ions missing and neither TDS or conductivity entered. Ideal conditions will be assumed. Ionic strength will be set to NA and activity coefficients in future calculations will be set to 1.  # \\donttest{ example_df <- water_df %>%   dplyr::mutate(br = 50) %>%   define_water_df() %>%   chemdose_dbp_df(input_water = \"defined\", cl2 = 4, time = 8)  example_df <- water_df %>%   dplyr::mutate(br = 50) %>%   dplyr::slice_sample(n = 3) %>%   define_water_df() %>%   dplyr::mutate(     cl2_dose = c(2, 3, 4),     time = 30   ) %>%   chemdose_dbp_df(     cl2 = cl2_dose, treatment = \"coag\", location = \"ds\",     cl_type = \"chloramine\", pluck_cols = TRUE   ) #> Warning: Temperature is outside the model bounds of temp=20 Celsius for coagulated water. #> Warning: pH is outside the model bounds of pH = 7.5 for coagulated water #> Warning: pH is outside the model bounds of pH = 7.5 for coagulated water #> Warning: Temperature is outside the model bounds of temp=20 Celsius for coagulated water. #> Warning: pH is outside the model bounds of pH = 7.5 for coagulated water # }"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/chemdose_ph.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate new pH and ion balance after chemical addition — chemdose_ph","title":"Calculate new pH and ion balance after chemical addition — chemdose_ph","text":"Calculates new pH, alkalinity, ion balance water based different chemical additions. single water use chemdose_ph; dataframe use chemdose_ph_df. Use pluck_cols = TRUE get values output water new dataframe columns. arguments _df helper \"use_col\" default looks column name dataframe. argument can specified directly function instead unquoted column name can provided.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/chemdose_ph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate new pH and ion balance after chemical addition — chemdose_ph","text":"","code":"chemdose_ph(   water,   hcl = 0,   h2so4 = 0,   h3po4 = 0,   hno3 = 0,   ch3cooh = 0,   co2 = 0,   naoh = 0,   caoh2 = 0,   mgoh2 = 0,   na2co3 = 0,   nahco3 = 0,   caco3 = 0,   caso4 = 0,   caocl2 = 0,   cacl2 = 0,   cl2 = 0,   naocl = 0,   nh4oh = 0,   nh42so4 = 0,   alum = 0,   ferricchloride = 0,   ferricsulfate = 0,   ach = 0,   kmno4 = 0,   naf = 0,   na3po4 = 0,   softening_correction = FALSE )  chemdose_ph_df(   df,   input_water = \"defined\",   output_water = \"dosed_chem\",   na_to_zero = TRUE,   pluck_cols = FALSE,   water_prefix = TRUE,   hcl = \"use_col\",   h2so4 = \"use_col\",   h3po4 = \"use_col\",   hno3 = \"use_col\",   ch3cooh = \"use_col\",   co2 = \"use_col\",   naoh = \"use_col\",   na2co3 = \"use_col\",   nahco3 = \"use_col\",   caoh2 = \"use_col\",   mgoh2 = \"use_col\",   caocl2 = \"use_col\",   cacl2 = \"use_col\",   cl2 = \"use_col\",   naocl = \"use_col\",   nh4oh = \"use_col\",   nh42so4 = \"use_col\",   caco3 = \"use_col\",   caso4 = \"use_col\",   alum = \"use_col\",   ferricchloride = \"use_col\",   ferricsulfate = \"use_col\",   ach = \"use_col\",   kmno4 = \"use_col\",   naf = \"use_col\",   na3po4 = \"use_col\",   softening_correction = \"use_col\" )"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/chemdose_ph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate new pH and ion balance after chemical addition — chemdose_ph","text":"water Source water object class \"water\" created define_water hcl Amount hydrochloric acid added mg/L: HCl -> H + Cl h2so4 Amount sulfuric acid added mg/L: H2SO4 -> 2H + SO4 h3po4 Amount phosphoric acid added mg/L: H3PO4 -> 3H + PO4 hno3 Amount nitric acid added mg/L: HNO3 -> H + NO3 ch3cooh Amount acetic acid added mg/L: CH3COOH -> H + CH3COO- co2 Amount carbon dioxide added mg/L: CO2 (gas) + H2O -> H2CO3* naoh Amount caustic added mg/L: NaOH -> Na + OH caoh2 Amount lime added mg/L: Ca(OH)2 -> Ca + 2OH mgoh2 Amount magnesium hydroxide added mg/L: Mg(OH)2 -> Mg + 2OH na2co3 Amount soda ash added mg/L: Na2CO3 -> 2Na + CO3 nahco3 Amount sodium bicarbonate added mg/L: NaHCO3 -> Na + H + CO3 caco3 Amount calcium carbonate added (removed) mg/L: CaCO3 -> Ca + CO3 caso4 Amount calcium sulfate added (post-RO condition) mg/L: CaSO4 -> Ca + SO4 caocl2 Amount Calcium hypochlorite added mg/L Cl2: CaOCl2 -> Ca + 2OCl cacl2 Amount calcium chloride added mg/L: CaCl2 -> Ca2+ + 2Cl- cl2 Amount chlorine gas added mg/L Cl2: Cl2(g) + H2O -> HOCl + H + Cl naocl Amount sodium hypochlorite added mg/L Cl2: NaOCl -> Na + OCl nh4oh Amount ammonium hydroxide added mg/L N: NH4OH -> NH4 + OH nh42so4 Amount ammonium sulfate added mg/L N: (NH4)2SO4 -> 2NH4 + SO4 alum Amount hydrated aluminum sulfate added mg/L: Al2(SO4)3*14H2O + 6HCO3 -> 2Al(OH)3() +3SO4 + 14H2O + 6CO2 ferricchloride Amount ferric Chloride added mg/L: FeCl3 + 3HCO3 -> Fe(OH)3() + 3Cl + 3CO2 ferricsulfate Amount ferric sulfate added mg/L: Fe2(SO4)3*8.8H2O + 6HCO3 -> 2Fe(OH)3() + 3SO4 + 8.8H2O + 6CO2 ach Amount aluminum chlorohydrate added mg/L: Al2(OH)5Cl*2H2O + HCO3 -> 2Al(OH)3() + Cl + 2H2O + CO2 kmno4 Amount potassium permanganate added mg/L: KMnO4 -> K + MnO4 naf Amount sodium fluoride added mg/L: NaF -> Na + F na3po4 Amount trisodium phosphate added mg/L: Na3PO4 -> 3Na + PO4 softening_correction Set TRUE correct post-softening pH (caco3 must < 0). Default FALSE. Based WTP model equation 5-62 df data frame containing water class column, already computed using define_water_df df may include columns named chemical(s) dosed. input_water name column water class data used input function. Default \"defined\". output_water name output column storing updated water class object. Default \"dosed\". na_to_zero option convert NA values data frame zeros. Default value TRUE. pluck_cols Extract primary water slots modified function (ph, alk) new numeric columns easy access. Default FALSE. water_prefix Append output_water name start plucked columns. Default TRUE.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/chemdose_ph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate new pH and ion balance after chemical addition — chemdose_ph","text":"chemdose_ph returns water class object updated pH, alkalinity, ions post-chemical addition. chemdose_ph_df returns data frame containing water class column updated pH, alkalinity, ions post-chemical addition.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/chemdose_ph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate new pH and ion balance after chemical addition — chemdose_ph","text":"function takes object class \"water\" created define_water user-specified chemical additions returns new object class \"water\" updated water quality. Units chemical additions mg/L chemical (product). chemdose_ph works evaluating user-specified chemical additions solving new pH must using uniroot satisfy principle electroneutrality pure water correcting existing alkalinity water chemical added . Multiple chemicals can added simultaneously addition can modeled independently sequential doses.","code":""},{"path":[]},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/chemdose_ph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate new pH and ion balance after chemical addition — chemdose_ph","text":"","code":"water <- define_water(ph = 7, temp = 25, alk = 10) #> Warning: Major ions missing and neither TDS or conductivity entered. Ideal conditions will be assumed. Ionic strength will be set to NA and activity coefficients in future calculations will be set to 1. # Dose 1 mg/L of hydrochloric acid dosed_water <- chemdose_ph(water, hcl = 1) #> Warning: Chloride-containing chemical dosed, but cl water slot is NA. Slot not updated because background cl unknown.  # Dose 1 mg/L of hydrochloric acid and 5 mg/L of alum simultaneously dosed_water <- chemdose_ph(water, hcl = 1, alum = 5) #> Warning: Chloride-containing chemical dosed, but cl water slot is NA. Slot not updated because background cl unknown. #> Warning: Sulfate-containing chemical dosed, but so4 water slot is NA. Slot not updated because background so4 unknown.  # Softening: water2 <- define_water(ph = 7, temp = 25, alk = 100, tot_hard = 350) #> Warning: Missing values for calcium and magnesium but total hardness supplied. Default ratio of 65% Ca2+ and 35% Mg2+ will be used. #> Warning: Major ions missing and neither TDS or conductivity entered. Ideal conditions will be assumed. Ionic strength will be set to NA and activity coefficients in future calculations will be set to 1. dosed_water2 <- chemdose_ph(water2, caco3 = -100, softening_correction = TRUE)  # \\donttest{ example_df <- water_df %>%   define_water_df() %>%   dplyr::slice_head(n = 3) %>%   dplyr::mutate(     hcl = c(2, 4, 6),     Caustic = 20   ) %>%   chemdose_ph_df(input_water = \"defined\", mgoh2 = c(20, 55), co2 = 4, naoh = Caustic)  example_df <- water_df %>%   define_water_df() %>%   chemdose_ph_df(naoh = 5, pluck_cols = TRUE) # }"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/chemdose_toc.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine TOC removal from coagulation — chemdose_toc","title":"Determine TOC removal from coagulation — chemdose_toc","text":"function applies Edwards (1997) model water created define_water determine coagulated DOC. Model assumes particulate TOC removed; therefore TOC = DOC output. Coagulated UVA U.S. EPA (2001) equation 5-80. Note models rely pH coagulation. raw water pH known, utilize chemdose_ph first. single water use chemdose_toc; dataframe use chemdose_toc_df. Use pluck_cols = TRUE get values output water new dataframe columns. arguments _df helper \"use_col\" default looks column name dataframe. argument can specified directly function instead unquoted column name can provided.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/chemdose_toc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine TOC removal from coagulation — chemdose_toc","text":"","code":"chemdose_toc(   water,   alum = 0,   ferricchloride = 0,   ferricsulfate = 0,   coeff = \"Alum\",   caoh2 = 0 )  chemdose_toc_df(   df,   input_water = \"defined\",   output_water = \"coagulated\",   pluck_cols = FALSE,   water_prefix = TRUE,   alum = \"use_col\",   ferricchloride = \"use_col\",   ferricsulfate = \"use_col\",   caoh2 = \"use_col\",   coeff = \"use_col\" )"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/chemdose_toc.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Determine TOC removal from coagulation — chemdose_toc","text":"Edwards (1997) U.S. EPA (2001) See reference list : https://github.com/BrownandCaldwell-Public/tidywater/wiki/References","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/chemdose_toc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine TOC removal from coagulation — chemdose_toc","text":"water Source water object class \"water\" created define_water. Water must include ph, doc, uv254 alum Amount hydrated aluminum sulfate added mg/L: Al2(SO4)3*14H2O + 6HCO3 -> 2Al(OH)3() +3SO4 + 14H2O + 6CO2 ferricchloride Amount ferric chloride added mg/L: FeCl3 + 3HCO3 -> Fe(OH)3() + 3Cl + 3CO2 ferricsulfate Amount ferric sulfate added mg/L: Fe2(SO4)3*8.8H2O + 6HCO3 -> 2Fe(OH)3() + 3SO4 + 8.8H2O + 6CO2 coeff String specifying Edwards coefficients used \"Alum\", \"Ferric\", \"General Alum\", \"General Ferric\", \"Low DOC\" data frame coefficients, must include: k1, k2, x1, x2, x3, b caoh2 Option add caoh2 mg/L soften water. predict DOC, TOC, UV254 using modified equation (see reference list). Defaults zero. df data frame containing water class column, already computed using define_water_df. df may include column named coagulant dosed, column named set coefficients use. input_water name column water class data used input function. Default \"defined\". output_water name output column storing updated water class object. Default \"coagulated\". pluck_cols Extract water slots modified function (doc, toc, uv254) new numeric columns easy access. Default FALSE. water_prefix Append output_water name start plucked columns. Default TRUE.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/chemdose_toc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine TOC removal from coagulation — chemdose_toc","text":"chemdose_toc returns single water class object updated DOC, TOC, UV254 concentration. chemdose_toc_df returns data frame containing water class column updated DOC, TOC, UV254 concentrations. Optionally, also adds columns slots individually.","code":""},{"path":[]},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/chemdose_toc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine TOC removal from coagulation — chemdose_toc","text":"","code":"water <- define_water(ph = 7, temp = 25, alk = 100, toc = 3.7, doc = 3.5, uv254 = .1) #> Warning: Major ions missing and neither TDS or conductivity entered. Ideal conditions will be assumed. Ionic strength will be set to NA and activity coefficients in future calculations will be set to 1. dosed_water <- chemdose_ph(water, alum = 30) %>%   chemdose_toc(alum = 30, coeff = \"Alum\") #> Warning: Sulfate-containing chemical dosed, but so4 water slot is NA. Slot not updated because background so4 unknown.  dosed_water <- chemdose_ph(water, alum = 10, h2so4 = 10) %>%   chemdose_toc(alum = 10, coeff = data.frame(     x1 = 280, x2 = -73.9, x3 = 4.96, k1 = -0.028, k2 = 0.23, b = 0.068   )) #> Warning: Sulfate-containing chemical dosed, but so4 water slot is NA. Slot not updated because background so4 unknown.  # \\donttest{ example_df <- water_df %>%   define_water_df() %>%   dplyr::mutate(FerricDose = seq(1, 12, 1)) %>%   chemdose_toc_df(ferricchloride = FerricDose, coeff = \"Ferric\")  example_df <- water_df %>%   define_water_df() %>%   dplyr::mutate(ferricchloride = seq(1, 12, 1)) %>%   chemdose_toc_df(coeff = \"Ferric\", pluck_cols = TRUE) # }"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/chloramine_conv.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame of conversion factors for estimating DBP formation from chloramines — chloramine_conv","title":"Data frame of conversion factors for estimating DBP formation from chloramines — chloramine_conv","text":"dataset containing conversion factors calculating DBP formation","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/chloramine_conv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame of conversion factors for estimating DBP formation from chloramines — chloramine_conv","text":"","code":"chloramine_conv"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/chloramine_conv.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data frame of conversion factors for estimating DBP formation from chloramines — chloramine_conv","text":"dataframe 17 rows 3 columns ID abbreviation dbp species alias full name dbp species percent specifies percent DBP formation predicted chloramines compared chlorine, assuming chlorine dose applied","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/chloramine_conv.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data frame of conversion factors for estimating DBP formation from chloramines — chloramine_conv","text":"U.S. EPA (2001), Table 5-10 See references list : https://github.com/BrownandCaldwell-Public/tidywater/wiki/References","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/cl2coeffs.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame of Cl2 decay coefficients — cl2coeffs","title":"Data frame of Cl2 decay coefficients — cl2coeffs","text":"dataset containing coefficients calculating Cl2 decay","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/cl2coeffs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame of Cl2 decay coefficients — cl2coeffs","text":"","code":"cl2coeffs"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/cl2coeffs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data frame of Cl2 decay coefficients — cl2coeffs","text":"dataframe 3 rows 4 columns treatment Specifies treatment applied water Coefficient chlorine decay model, associated chlorine dose time b Coefficient chlorine decay model, associated chlorine dose & organics c Exponent chlorine decay model, associated chlorine dose & organics","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/cl2coeffs.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data frame of Cl2 decay coefficients — cl2coeffs","text":"U.S. EPA (2001)","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/convert_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate unit conversions for common compounds — convert_units","title":"Calculate unit conversions for common compounds — convert_units","text":"function takes value converts units based compound name.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/convert_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate unit conversions for common compounds — convert_units","text":"","code":"convert_units(value, formula, startunit = \"mg/L\", endunit = \"M\")"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/convert_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate unit conversions for common compounds — convert_units","text":"value Value converted formula Chemical formula compound. Accepts compounds mweights conversions g mol eq startunit Units current value, currently accepts g/L; g/L CaCO3; g/L N; M; eq/L; units \"m\", \"u\", \"n\" prefixes endunit Desired units, currently accepts start units","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/convert_units.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate unit conversions for common compounds — convert_units","text":"numeric value converted parameter.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/convert_units.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate unit conversions for common compounds — convert_units","text":"","code":"convert_units(50, \"ca\") # converts from mg/L to M by default #> [1] 0.001247567 convert_units(50, \"ca\", \"mg/L\", \"mg/L CaCO3\") #> [1] 124.8651 convert_units(50, \"ca\", startunit = \"mg/L\", endunit = \"eq/L\") #> [1] 0.002495134"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/convert_water.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert water class object to a dataframe — convert_water","title":"Convert water class object to a dataframe — convert_water","text":"converts water class dataframe individual columns slot (water quality parameter) water. useful one-checks. typical applications, use pluck_cols = TRUE _df function pluck_water choose relevant slots. Use convert_water keep slots units water. Use convert_watermg convert typical units. Converts following slots M mg/L: na, ca, mg, k, cl, so4, hco3, co3, h2po4, hpo4, po4, ocl, bro3, f, fe, al. Converts slots ug/L: br, mn.  values remain unchanged.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/convert_water.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert water class object to a dataframe — convert_water","text":"","code":"convert_water(water)  convert_watermg(water)"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/convert_water.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert water class object to a dataframe — convert_water","text":"water water class object","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/convert_water.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert water class object to a dataframe — convert_water","text":"data frame containing columns non-NA water slots. data frame containing columns non-NA water slots ions mg/L.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/convert_water.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert water class object to a dataframe — convert_water","text":"","code":"# Generates 1 row dataframe example_df <- define_water(ph = 7, temp = 20, alk = 100) %>%   convert_water() #> Warning: Major ions missing and neither TDS or conductivity entered. Ideal conditions will be assumed. Ionic strength will be set to NA and activity coefficients in future calculations will be set to 1.  example_df <- water_df %>%   define_water_df() %>%   dplyr::mutate(to_dataframe = purrr::map(defined, convert_water)) %>%   tidyr::unnest(to_dataframe) %>%   dplyr::select(-defined)  water_defined <- define_water(7, 20, 50, 100, 80, 10, 10, 10, 10, tot_po4 = 1) %>%   convert_watermg() #> Warning: User entered total hardness is >10% different than calculated hardness."},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/correct_k.html","id":null,"dir":"Reference","previous_headings":"","what":"Correct acid dissociation constants — correct_k","title":"Correct acid dissociation constants — correct_k","text":"function calculates corrected equilibrium constant temperature ionic strength","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/correct_k.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correct acid dissociation constants — correct_k","text":"","code":"correct_k(water)"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/correct_k.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correct acid dissociation constants — correct_k","text":"water Defined water values temperature ion concentrations","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/correct_k.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Correct acid dissociation constants — correct_k","text":"dataframe equilibrium constants co3, po4, so4, ocl, nh4.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/correct_k.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Correct acid dissociation constants — correct_k","text":"","code":"water_defined <- define_water(7, 20, 50, 100, 80, 10, 10, 10, 10, tot_po4 = 1) #> Warning: User entered total hardness is >10% different than calculated hardness. correct_k(water_defined) #>          k1co3       k2co3       k1po4        k2po4        k3po4         kocl #> 1 4.974812e-07 5.82167e-11 0.008584056 8.453217e-08 6.537799e-13 3.151725e-08 #>           knh4      kso4         kbo3       k1sio4       k2sio4      kch3coo #> 1 4.674863e-10 0.0164065 9.021809e-10 1.423268e-10 6.745386e-14 2.057709e-05"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/dbp_correction.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame of correction factors for estimating DBP formation as a function of location — dbp_correction","title":"Data frame of correction factors for estimating DBP formation as a function of location — dbp_correction","text":"dataset containing correction factors calculating DBP formation","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/dbp_correction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame of correction factors for estimating DBP formation as a function of location — dbp_correction","text":"","code":"dbp_correction"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/dbp_correction.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data frame of correction factors for estimating DBP formation as a function of location — dbp_correction","text":"dataframe 17 rows 4 columns ID abbreviation dbp species alias full name dbp species plant specifies correction factor modelling DBP formation within treatment plant ds specifies correction factor modelling DBP formation within distribution system","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/dbp_correction.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data frame of correction factors for estimating DBP formation as a function of location — dbp_correction","text":"U.S. EPA (2001), Table 5-7 See references list : https://github.com/BrownandCaldwell-Public/tidywater/wiki/References","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/dbpcoeffs.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame of DBP coefficients for predicting DBP formation — dbpcoeffs","title":"Data frame of DBP coefficients for predicting DBP formation — dbpcoeffs","text":"dataset containing coefficients calculating DBP formation","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/dbpcoeffs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame of DBP coefficients for predicting DBP formation — dbpcoeffs","text":"","code":"dbpcoeffs"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/dbpcoeffs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data frame of DBP coefficients for predicting DBP formation — dbpcoeffs","text":"dataframe 30 rows 10 columns ID abbreviation dbp species alias full name dbp species water_type specifies model constants apply , either treated untreated water First coefficient DBP model Second coefficient DBP model, associated TOC DOC b Third coefficient DBP model, associated Cl2 c Fourth coefficient DBP model, associated Br- d Fifth coefficient DBP model, associated temperature e Sixth coefficient DBP model, associated pH f Seventh coefficient DBP model, associated reaction time","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/dbpcoeffs.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data frame of DBP coefficients for predicting DBP formation — dbpcoeffs","text":"U.S. EPA (2001) See references list : https://github.com/BrownandCaldwell-Public/tidywater/wiki/References","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/decarbonate_ph.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply decarbonation to a water — decarbonate_ph","title":"Apply decarbonation to a water — decarbonate_ph","text":"Calculates new water quality (pH, alkalinity, etc) specified amount CO2 removed (removed bicarbonate). function takes object class \"water\" fraction CO2 removed, returns water class object updated water slots. single water, use decarbonate_ph; apply model dataframe, use decarbonate_ph_df. single water use chemdose_toc; dataframe use chemdose_toc_df. Use pluck_cols = TRUE get values output water new dataframe columns. arguments _df helper \"use_col\" default looks column name dataframe. argument can specified directly function instead unquoted column name can provided.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/decarbonate_ph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply decarbonation to a water — decarbonate_ph","text":"","code":"decarbonate_ph(water, co2_removed)  decarbonate_ph_df(   df,   input_water = \"defined\",   output_water = \"decarbonated\",   pluck_cols = FALSE,   water_prefix = TRUE,   co2_removed = \"use_col\" )"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/decarbonate_ph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply decarbonation to a water — decarbonate_ph","text":"water Source water class \"water\" created define_water co2_removed Fraction CO2 removed df data frame containing water class column, already computed using define_water_df. df may include column names chemicals dosed. input_water name column water class data used input function. Default \"defined\". output_water name output column storing updated water class object. Default \"decarbonated\". pluck_cols Extract water slots modified function (ph, alk) new numeric columns easy access. Default FALSE. water_prefix Append output_water name start plucked columns. Default TRUE.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/decarbonate_ph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply decarbonation to a water — decarbonate_ph","text":"water updated pH/alk/etc. decarbonate_ph_df returns data frame containing water class column updated ph alk (pH dependent ions). Optionally, also adds columns slots individually.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/decarbonate_ph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply decarbonation to a water — decarbonate_ph","text":"decarbonate_ph uses water@h2co3 determine existing CO2 water, applies chemdose_ph match CO2 removal.","code":""},{"path":[]},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/decarbonate_ph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply decarbonation to a water — decarbonate_ph","text":"","code":"water <- define_water(ph = 4, temp = 25, alk = 5) %>%   decarbonate_ph(co2_removed = .95) #> Warning: Major ions missing and neither TDS or conductivity entered. Ideal conditions will be assumed. Ionic strength will be set to NA and activity coefficients in future calculations will be set to 1.   example_df <- water_df %>%   define_water_df() %>%   decarbonate_ph_df(     input_water = \"defined\", output_water = \"decarb\",     co2_removed = .95, pluck_cols = TRUE   )"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/define_water.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a water class object given water quality parameters — define_water","title":"Create a water class object given water quality parameters — define_water","text":"function takes user-defined water quality parameters creates S4 \"water\" class object forms input output tidywater models.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/define_water.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a water class object given water quality parameters — define_water","text":"","code":"define_water(   ph,   temp = 25,   alk,   tot_hard,   ca,   mg,   na,   k,   cl,   so4,   mno4,   free_chlorine = 0,   combined_chlorine = 0,   tot_po4 = 0,   tot_nh3 = 0,   tot_ch3coo = 0,   tot_bo3 = 0,   tot_sio4 = 0,   tds,   cond,   toc,   doc,   uv254,   br,   f,   fe,   al,   mn,   no3 )"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/define_water.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Create a water class object given water quality parameters — define_water","text":"Crittenden et al. (2012) equation 5-38 - ionic strength TDS Snoeyink & Jenkins (1980) - ionic strength conductivity Lewis Randall (1921), Crittenden et al. (2012) equation 5-37 - ionic strength ion concentrations Harned Owen (1958), Crittenden et al. (2012) equation 5-45 - Temperature correction dielectric constant (relative permittivity)","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/define_water.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a water class object given water quality parameters — define_water","text":"ph water pH temp Temperature degree C alk Alkalinity mg/L CaCO3 tot_hard Total hardness mg/L CaCO3 ca Calcium mg/L Ca2+ mg Magnesium mg/L Mg2+ na Sodium mg/L Na+ k Potassium mg/L K+ cl Chloride mg/L Cl- so4 Sulfate mg/L SO42- mno4 Permanganate mg/L MnO4- free_chlorine Free chlorine mg/L Cl2. Used starting water free chlorine residual. combined_chlorine Combined chlorine (chloramines) mg/L Cl2. Used starting water chloramine residual. tot_po4 Phosphate mg/L PO4 3-. Used starting water phosphate residual. tot_nh3 Total ammonia mg/L N tot_ch3coo Total acetate mg/L tot_bo3 Total borate (B(OH)4 -) mg/L B tot_sio4 Total silicate mg/L SiO2 tds Total Dissolved Solids mg/L (optional ions known) cond Electrical conductivity uS/cm (optional ions known) toc Total organic carbon (TOC) mg/L doc Dissolved organic carbon (DOC) mg/L uv254 UV absorbance 254 nm (cm-1) br Bromide ug/L Br- f Fluoride mg/L F- fe Iron mg/L Fe3+ al Aluminum mg/L Al3+ mn Manganese ug/L Mn2+ no3 Nitrate mg/L N","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/define_water.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a water class object given water quality parameters — define_water","text":"define_water outputs water class object slots filled calculated based input parameters. Water slots different units input define_water function, listed . pH pH, numeric, standard units (SU). temp temperature, numeric, °C. alk alkalinity, numeric, mg/L CaCO3. tds total dissolved solids, numeric, mg/L. cond electrical conductivity, numeric, uS/cm. tot_hard total hardness, numeric, mg/L CaCO3. kw dissociation constant water, numeric, unitless. alk_eq total alkalinity equivalents, numeric, equivalent (eq). carbonate_alk_eq carbonate alkalinity equivalents, numeric, equivalent (eq). phosphate_alk_eq phosphate alkalinity equivalents, numeric, equivalent (eq). ammonium_alk_eq ammonium alkalinity equivalents, numeric, equivalent (eq). borate_alk_eq borate alkalinity equivalents, numeric, equivalent (eq). silicate_alk_eq silicate alkalinity equivalents, numeric, equivalent (eq). hypochlorite_alk_eq hypochlorite alkalinity equivalents, numeric, equivalent (eq). toc total organic carbon, numeric, mg/L. doc dissolved organic carbon, numeric, mg/L. bdoc biodegradable organic carbon, numeric, mg/L. uv254 light absorption 254 nm, numeric, cm-1. dic dissolved inorganic carbon, numeric, mg/L C. ionic strength, numeric, mol/L. na sodium, numeric, mols/L. ca calcium, numeric, mols/L. mg magnesium, numeric, mols/L. k potassium, numeric, mols/L. cl chloride, numeric, mols/L. so4 sulfate, numeric, mols/L. mno4 permanganate, numeric, mols/L. no3 nitrate, numeric, mols/L. hco3 bicarbonate, numeric, mols/L. co3 carbonate, numeric, mols/L. h2po4 phosphoric acid, numeric, mols/L. hpo4 hydrogen phosphate, numeric, mols/L. po4 phosphate, numeric, mols/L. nh4 ammonium, numeric, mol/L N. bo3 borate, numeric, mol/L. h3sio4 trihydrogen silicate, numeric, mol/L. h2sio4 dihydrogen silicate, numeric, mol/L. ch3coo acetate, numeric, mol/L. h hydrogen ion, numeric, mol/L. oh hydroxide ion, numeric, mol/L. tot_po4 total phosphate, numeric, mol/L. tot_nh3 total ammonia, numeric, mol/L. tot_co3 total carbonate, numeric, mol/L. tot_bo3 total borate, numeric, mol/L. tot_sio4 total silicate, numeric, mol/L. tot_ch3coo total acetate, numeric, mol/L. br bromide, numeric, mol/L. bro3 bromate, numeric, mol/L. f fluoride, numeric, mol/L. fe iron, numeric, mol/L. al aluminum, numeric, mol/L. mn manganese, numeric, mol/L. free_chlorine free chlorine, numeric, mol/L. ocl hypochlorite ion, numeric, mol/L. combined_chlorine sum chloramines, numeric, mol/L. nh2cl monochloramine, numeric, mol/L. nhcl2 dichloramine, numeric, mol/L. ncl3 trichloramine, numeric, mol/L. chcl3 chloroform, numeric, ug/L. chcl2br bromodichloromethane, numeric, ug/L. chbr2cl dibromodichloromethane, numeric, ug/L. chbr3 bromoform, numeric, ug/L. tthm total trihalomethanes, numeric, ug/L. mcaa chloroacetic acid, numeric, ug/L. dmcaa dichloroacetic acid, numeric, ug/L. tcaa trichloroacetic acid, numeric, ug/L. mbaa bromoacetic acid, numeric, ug/L. dbaa dibromoacetic acid, numeric, ug/L. haa5 sum haloacetic acids, numeric, ug/L. bcaa bromochloroacetic acid, numeric, ug/L. cdbaa chlorodibromoacetic acid, numeric, ug/L. dcbaa dichlorobromoacetic acid, numeric, ug/L. tbaa tribromoacetic acid, numeric, ug/L.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/define_water.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a water class object given water quality parameters — define_water","text":"Carbonate balance calculated units converted mol/L. Ionic strength determined ions, TDS, conductivity. Missing values handled defaulting 0 NA. Calcium defaults 65 percent total hardness specified. DOC defaults 95 percent TOC.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/define_water.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a water class object given water quality parameters — define_water","text":"","code":"water_missingions <- define_water(ph = 7, temp = 15, alk = 100, tds = 10) water_defined <- define_water(7, 20, 50, 100, 80, 10, 10, 10, 10, tot_po4 = 1) #> Warning: User entered total hardness is >10% different than calculated hardness."},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/define_water_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply define_water within a dataframe and output a column of water class to be chained to other tidywater functions — define_water_df","title":"Apply define_water within a dataframe and output a column of water class to be chained to other tidywater functions — define_water_df","text":"function allows define_water added piped data frame. output water class, can therefore chained \"downstream\" tidywater functions.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/define_water_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply define_water within a dataframe and output a column of water class to be chained to other tidywater functions — define_water_df","text":"","code":"define_water_df(   df,   output_water = \"defined\",   pluck_cols = FALSE,   water_prefix = TRUE )"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/define_water_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply define_water within a dataframe and output a column of water class to be chained to other tidywater functions — define_water_df","text":"df data frame containing columns desired parameters column names matching argument names define_water output_water name output column storing updated parameters class, water. Default \"defined\". pluck_cols Extract primary water slots (ph, alk, doc, uv254) new numeric columns easy access. Default FALSE. water_prefix Append output_water name start plucked columns. Default TRUE.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/define_water_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply define_water within a dataframe and output a column of water class to be chained to other tidywater functions — define_water_df","text":"data frame containing water class column.","code":""},{"path":[]},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/define_water_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply define_water within a dataframe and output a column of water class to be chained to other tidywater functions — define_water_df","text":"","code":"# \\donttest{ example_df <- water_df %>%   define_water_df() %>%   balance_ions_df()  example_df <- water_df %>%   define_water_df(output_water = \"This is a column of water\") %>%   balance_ions_df(input_water = \"This is a column of water\") # }"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/discons.html","id":null,"dir":"Reference","previous_headings":"","what":"Dissociation constants and standard enthalpy for weak acids/bases — discons","title":"Dissociation constants and standard enthalpy for weak acids/bases — discons","text":"Equilibrium constants (k) corresponding standard enthalpy reaction values (deltah) significant acids water influencing pH equilibrium. Includes carbonate, sulfate, phosphate, hypochlorite. Standard enthalpy reaction calculated taking sum enthalpy formation individual component minus enthalpy formation final product. e.g., standard enthalpy reaction water can calculated : deltah_h2o = deltah_f_oh + deltah_f_h - deltah_f_h2o = -230 + 0 - (-285.83) = 55.83 kJ/mol. See MWH (2012) example 5-5 Benjamin (2002) eq. 2.96.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/discons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dissociation constants and standard enthalpy for weak acids/bases — discons","text":"","code":"discons"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/discons.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dissociation constants and standard enthalpy for weak acids/bases — discons","text":"dataframe 8 rows 3 columns ID Coefficient type k Equilibrium constant deltah Standard enthalpy J/mol","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/discons.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Dissociation constants and standard enthalpy for weak acids/bases — discons","text":"Benjamin (2015) Appendix .1 .2. See references list : https://github.com/BrownandCaldwell-Public/tidywater/wiki/References","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/dissolve_cu.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Dissolved Copper Concentration — dissolve_cu","title":"Calculate Dissolved Copper Concentration — dissolve_cu","text":"function takes water defined defined_water output column dissolved copper. empirical model developed based bench-scale copper solubility testing can used predict copper levels function pH, DIC, orthophosphate. single water, use dissolve_cu; apply model dataframe use dissolve_cu_df.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/dissolve_cu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Dissolved Copper Concentration — dissolve_cu","text":"","code":"dissolve_cu(water)"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/dissolve_cu.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Calculate Dissolved Copper Concentration — dissolve_cu","text":"Lytle et al (2018)","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/dissolve_cu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Dissolved Copper Concentration — dissolve_cu","text":"water Source water object class \"water\" created define_water. Water must include ph dic","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/dissolve_cu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Dissolved Copper Concentration — dissolve_cu","text":"dissolve_cu returns column containing dissolved copper concentration mg/L.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/dissolve_cu.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Dissolved Copper Concentration — dissolve_cu","text":"Dissolved copper function pH, DIC, PO4. Output units mg/L.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/dissolve_cu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Dissolved Copper Concentration — dissolve_cu","text":"","code":"example_cu <- define_water(ph = 7.5, alk = 125, tot_po4 = 2) %>%   dissolve_cu() #> Warning: Major ions missing and neither TDS or conductivity entered. Ideal conditions will be assumed. Ionic strength will be set to NA and activity coefficients in future calculations will be set to 1."},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/dissolve_cu_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Dissolved Copper Concentration — dissolve_cu_df","title":"Calculate Dissolved Copper Concentration — dissolve_cu_df","text":"Calculate Dissolved Copper Concentration","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/dissolve_cu_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Dissolved Copper Concentration — dissolve_cu_df","text":"","code":"dissolve_cu_df(df, input_water = \"defined\", water_prefix = TRUE)"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/dissolve_cu_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Dissolved Copper Concentration — dissolve_cu_df","text":"df data frame containing water class column, already computed using define_water_df input_water name column Water class data used input function. Default \"defined_water\". water_prefix Append output_water name start plucked columns. Default TRUE.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/dissolve_cu_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Dissolved Copper Concentration — dissolve_cu_df","text":"dissolve_cu_df returns data frame containing original data frame column dissolved copper mg/L.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/dissolve_cu_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Dissolved Copper Concentration — dissolve_cu_df","text":"","code":"cu_calc <- water_df %>%   define_water_df() %>%   dissolve_cu_df() #> Warning: This model was fit on waters with phosphate residual between 0.2-3.1 mg/L. #> Warning: This model was fit on waters with phosphate residual between 0.2-3.1 mg/L. #> Warning: This model was fit on waters with phosphate residual between 0.2-3.1 mg/L. #> Warning: This model was fit on waters with phosphate residual between 0.2-3.1 mg/L. #> Warning: This model was fit on waters with phosphate residual between 0.2-3.1 mg/L. #> Warning: This model was fit on waters with phosphate residual between 0.2-3.1 mg/L. #> Warning: This model was fit on waters with phosphate residual between 0.2-3.1 mg/L. #> Warning: This model was fit on waters with phosphate residual between 0.2-3.1 mg/L."},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/dissolve_pb.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate contributions of various lead solids to total soluble lead — dissolve_pb","title":"Simulate contributions of various lead solids to total soluble lead — dissolve_pb","text":"function takes water data frame defined define_water outputs dataframe controlling lead solid total lead solubility. Lead solid solubility calculated based controlling solid. Total dissolved lead species (tot_dissolved_pb, M) calculated based lead complex calculations. single water, use dissolve_pb; apply model dataframe, use dissolve_pb_df. arguments, _df \"use_col\" default looks column name dataframe. argument can specified directly function instead unquoted column name can provided.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/dissolve_pb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate contributions of various lead solids to total soluble lead — dissolve_pb","text":"","code":"dissolve_pb(   water,   hydroxypyromorphite = \"Schock\",   pyromorphite = \"Topolska\",   laurionite = \"Nasanen\" )  dissolve_pb_df(   df,   input_water = \"defined\",   output_col_solid = \"controlling_solid\",   output_col_result = \"pb\",   hydroxypyromorphite = \"Schock\",   pyromorphite = \"Topolska\",   laurionite = \"Nasanen\",   water_prefix = TRUE )"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/dissolve_pb.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Simulate contributions of various lead solids to total soluble lead — dissolve_pb","text":"Code EPA's TELSS lead solubility dashboard https://github.com/USEPA/TELSS licensed MIT License: Permission hereby granted, free charge, person obtaining copy software associated documentation files (\"Software\"), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. Wahman et al. (2021) See references list : https://github.com/BrownandCaldwell-Public/tidywater/wiki/References","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/dissolve_pb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate contributions of various lead solids to total soluble lead — dissolve_pb","text":"water Source water object class \"water\" created define_water. Water must include alk . po4, cl, so4 known, also included. hydroxypyromorphite defaults \"Schock\", constant, K, developed Schock et al (1996). Can also use \"Zhu\". pyromorphite defaults \"Topolska\", constant, K, developed Topolska et al (2016). Can also use \"Xie\". laurionite defaults \"Nasanen\", constant, K, developed Nasanen & Lindell (1976). Can also use \"Lothenbach\". df data frame containing water class column, already computed using define_water_df input_water name column water class data used input. Default \"defined_water\". output_col_solid name output column storing controlling lead solid. Default \"controlling_solid\". output_col_result name output column storing dissolved lead M. Default \"pb\". water_prefix name input water used calculation, appended start output columns. Default TRUE. Change FALSE remove water prefix output column names.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/dissolve_pb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate contributions of various lead solids to total soluble lead — dissolve_pb","text":"dissolve_pb returns one row data frame containing controlling lead solid modeled dissolved lead concentration. dissolve_pb_df returns data frame containing controlling lead solid modeled dissolved lead concentration new columns.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/dissolve_pb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate contributions of various lead solids to total soluble lead — dissolve_pb","text":"solid lowest solubility form lead scale (controlling lead solid). lead solids two k-constant options. function default EPA's default constants. user may change constants hydroxypyromorphite = \"Zhu\" pyromorphite = \"Xie\" laurionite = \"Lothenbach\" Make sure total dissolved solids, conductivity, ca, na, cl, so4 used define_water ionic strength calculated.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/dissolve_pb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate contributions of various lead solids to total soluble lead — dissolve_pb","text":"","code":"example_pb <- define_water(   ph = 7.5, temp = 25, alk = 93, cl = 240,   tot_po4 = 0, so4 = 150, tds = 200 ) %>%   dissolve_pb() example_pb <- define_water(   ph = 7.5, temp = 25, alk = 93, cl = 240,   tot_po4 = 0, so4 = 150, tds = 200 ) %>%   dissolve_pb(pyromorphite = \"Xie\")   example_df <- water_df %>%   define_water_df() %>%   dissolve_pb_df(output_col_result = \"dissolved_lead\", pyromorphite = \"Xie\")"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/edwardscoeff.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame of Edwards model coefficients — edwardscoeff","title":"Data frame of Edwards model coefficients — edwardscoeff","text":"dataset containing coefficients Edwards (1997) model coagulation TOC removal.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/edwardscoeff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame of Edwards model coefficients — edwardscoeff","text":"","code":"edwardscoeff"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/edwardscoeff.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data frame of Edwards model coefficients — edwardscoeff","text":"dataframe 5 rows 7 columns: ID Coefficient type x3 x3 parameter x2 x2 parameter x1 x1 parameter k1 k1 parameter k2 k2 parameter b b parameter","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/edwardscoeff.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data frame of Edwards model coefficients — edwardscoeff","text":"Edwards (1997) Table 2. See references list : https://github.com/BrownandCaldwell-Public/tidywater/wiki/References","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/gac_toc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate TOC Concentration in GAC system — gac_toc","title":"Calculate TOC Concentration in GAC system — gac_toc","text":"Calculates TOC concentration passing GAC treatment according model developed \"Modeling TOC Breakthrough Granular Activated Carbon Adsorbers\" Zachman Summers (2010), logistics curve approach EPA WTP Model v. 2.0 Manual (2001). single water use gac_toc; dataframe use gac_toc_df. Use pluck_water get values output water new dataframe columns. arguments _df helper \"use_col\" default looks column name dataframe. argument can specified directly function instead unquoted column name can provided. Water must contain DOC TOC value.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/gac_toc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate TOC Concentration in GAC system — gac_toc","text":"","code":"gac_toc(   water,   ebct = 10,   model = \"Zachman\",   media_size = \"12x40\",   bed_vol,   pretreat = \"coag\" )  gac_toc_df(   df,   input_water = \"defined\",   output_water = \"gaced\",   model = \"use_col\",   pluck_cols = FALSE,   water_prefix = TRUE,   media_size = \"use_col\",   ebct = \"use_col\",   bed_vol = \"use_col\",   pretreat = \"use_col\" )"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/gac_toc.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Calculate TOC Concentration in GAC system — gac_toc","text":"See references list : https://github.com/BrownandCaldwell-Public/tidywater/wiki/References Zachman Summers (2010) U.S. EPA (2001)","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/gac_toc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate TOC Concentration in GAC system — gac_toc","text":"water Source water object class \"water\" created define_water ebct Empty bed contact time (minutes). Model results valid 10 20 minutes. Defaults 10 minutes. model Specifies GAC TOC removal model apply. Options Zachman WTP. Defaults Zachman. media_size Size GAC filter mesh. Model includes 12x40 8x30 mesh sizes. Defaults 12x40. bed_vol Bed volume GAC filter predict effluent TOC . pretreat Specifies level pretreatment prior GAC treatment. Defaults \"coag\". option coagulant, ozonation, biotreatment, called \"o3biof\". df data frame containing water class column, already computed using define_water_df. df may include columns named media_size, ebct, bed volume. input_water name column water class data used input function. Default \"defined\". output_water name output column storing updated parameters class, water. Default \"gaced\". pluck_cols Extract water slots modified function (doc, toc, uv254) new numeric columns easy access. Default FALSE. water_prefix Append output_water name start plucked columns. Default TRUE.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/gac_toc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate TOC Concentration in GAC system — gac_toc","text":"gac_toc returns water class object updated DOC, TOC, UV254 slots. gac_toc_df returns data frame containing water class column updated DOC, TOC, UV254 slots","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/gac_toc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate TOC Concentration in GAC system — gac_toc","text":"GAC model TOC removal function calculate TOC concentration GAC adsorption drinking water treatment. UV254 concentrations predicted based linear relationship DOC WTP Model Equation 5-93 5-94.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/gac_toc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate TOC Concentration in GAC system — gac_toc","text":"","code":"water <- define_water(ph = 8, toc = 2.5, uv254 = .05, doc = 1.5) %>%   gac_toc(media_size = \"8x30\", ebct = 20, model = \"Zachman\", bed_vol = 15000) #> Warning: Missing value for alkalinity. Carbonate balance will not be calculated. #> Warning: Major ions missing and neither TDS or conductivity entered. Ideal conditions will be assumed. Ionic strength will be set to NA and activity coefficients in future calculations will be set to 1.  # \\donttest{ example_df <- water_df %>%   define_water_df() %>%   dplyr::mutate(     model = \"WTP\",     media_size = \"8x30\",     ebct = 10,     bed_vol = rep(c(12000, 15000, 18000), 4)   ) %>%   gac_toc_df()  example_df <- water_df %>%   define_water_df(\"raw\") %>%   dplyr::mutate(     model = \"WTP\",     bed_vol = 15000   ) %>%   gac_toc_df(input_water = \"raw\") # }"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/gacbv_toc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate maximum bed volumes to stay below target DOC — gacbv_toc","title":"Calculate maximum bed volumes to stay below target DOC — gacbv_toc","text":"Calculates GAC filter bed volumes achieve target effluent DOC according model developed \"Modeling TOC Breakthrough Granular Activated Carbon Adsorbers\" Zachman Summers (2010), USEPA WTP Model v. 2.0 Manual (2001). single water use gacbv_toc; dataframe use gacbv_toc_df. arguments _df helper \"use_col\" default looks column name dataframe. argument can specified directly function instead unquoted column name can provided. Water must contain DOC TOC value.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/gacbv_toc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate maximum bed volumes to stay below target DOC — gacbv_toc","text":"","code":"gacbv_toc(   water,   ebct = 10,   model = \"Zachman\",   media_size = \"12x40\",   target_doc )  gacbv_toc_df(   df,   input_water = \"defined\",   model = \"use_col\",   media_size = \"use_col\",   ebct = \"use_col\",   target_doc = \"use_col\",   water_prefix = TRUE )"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/gacbv_toc.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Calculate maximum bed volumes to stay below target DOC — gacbv_toc","text":"See references list : https://github.com/BrownandCaldwell-Public/tidywater/wiki/References Zachman Summers (2010) USEPA (2001)","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/gacbv_toc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate maximum bed volumes to stay below target DOC — gacbv_toc","text":"water Source water object class \"water\" created define_water ebct Empty bed contact time (minutes). Model results valid 10 20 minutes. Default 10 minutes. model Specifies GAC TOC removal model apply. Options Zachman WTP. media_size Size GAC filter mesh. Model includes 12x40 8x30 mesh sizes. Default 12x40. target_doc Optional input set target DOC concentration calculate necessary bed volume df data frame containing water class column, already computed using define_water_df df may include columns named chemical(s) dosed. input_water name column water class data used input function. Default \"defined\". water_prefix Append output_water name start plucked columns. Default TRUE.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/gacbv_toc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate maximum bed volumes to stay below target DOC — gacbv_toc","text":"gacbv_toc returns data frame bed volumes achieve target DOC. gacbv_toc_df returns data frame columns bed volumes.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/gacbv_toc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate maximum bed volumes to stay below target DOC — gacbv_toc","text":"GAC model TOC removal function calculate bed volume required achieve given target DOC values.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/gacbv_toc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate maximum bed volumes to stay below target DOC — gacbv_toc","text":"","code":"water <- define_water(ph = 8, toc = 2.5, uv254 = .05, doc = 1.5) #> Warning: Missing value for alkalinity. Carbonate balance will not be calculated. #> Warning: Major ions missing and neither TDS or conductivity entered. Ideal conditions will be assumed. Ionic strength will be set to NA and activity coefficients in future calculations will be set to 1. bed_volume <- gacbv_toc(water, media_size = \"8x30\", ebct = 20, model = \"Zachman\", target_doc = 0.8)  # \\donttest{ library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union  example_df <- water_df %>%   define_water_df() %>%   dplyr::mutate(     model = \"WTP\",     media_size = \"8x30\",     ebct = 10,     target_doc = rep(c(0.5, 0.8, 1), 4)   ) %>%   gacbv_toc_df() # }"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/gacrun_toc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate TOC Concentration in GAC system — gacrun_toc","title":"Calculate TOC Concentration in GAC system — gacrun_toc","text":"Returns data frame breakthrough curve based TOC concentration passing GAC treatment, according model developed \"Modeling TOC Breakthrough Granular Activated Carbon Adsorbers\" Zachman Summers (2010), USEPA WTP Model v. 2.0 Manual (2001). Water must contain DOC TOC value.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/gacrun_toc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate TOC Concentration in GAC system — gacrun_toc","text":"","code":"gacrun_toc(   water,   ebct = 10,   model = \"Zachman\",   media_size = \"12x40\",   bvs = c(2000, 20000, 100) )  gacrun_toc_df(   df,   input_water = \"defined\",   water_prefix = TRUE,   ebct = \"use_col\",   model = \"use_col\",   media_size = \"use_col\",   bvs = \"use_col\" )"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/gacrun_toc.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Calculate TOC Concentration in GAC system — gacrun_toc","text":"See references list : https://github.com/BrownandCaldwell-Public/tidywater/wiki/References Zachman Summers (2010) USEPA (2001)","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/gacrun_toc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate TOC Concentration in GAC system — gacrun_toc","text":"water Source water object class \"water\" created define_water ebct Empty bed contact time (minutes). Model results valid 10 20 minutes. Default 10 minutes. model Specifies GAC TOC removal model apply. Options Zachman WTP. media_size Size GAC filter mesh. model Zachman, can choose 12x40 8x30 mesh sizes, otherwise leave default. Defaults 12x40. bvs using WTP model, option run WTP model specific sequence bed volumes, otherwise leave default. Defaults c(2000, 20000, 100). df data frame containing water class column, already computed using define_water_df. df may include column named coagulant dosed, column named set coefficients use. input_water name column water class data used input function. Default \"defined\". water_prefix Append input_water name start output columns. Default TRUE.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/gacrun_toc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate TOC Concentration in GAC system — gacrun_toc","text":"gacrun_toc returns data frame bed volumes breakthrough TOC values. gacrun_toc_df returns data frame containing columns breakthrough curve (breakthrough bed volume).","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/gacrun_toc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate TOC Concentration in GAC system — gacrun_toc","text":"GAC model TOC removal function calculate bed volumes normalized TOC breakthrough (TOCeff/TOCinf) given model type. models developed using data sets bench-scale GAC treatment studies using bituminous GAC EBCTs either 10 20 minutes. specific mesh sizes used develop Zachman Summers model 12x40 8x30. models also developed using influent pH TOC specific ranges. Refer papers included references details.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/gacrun_toc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate TOC Concentration in GAC system — gacrun_toc","text":"","code":"water <- define_water(ph = 8, toc = 2.5, uv254 = .05, doc = 1.5) %>%   gacrun_toc(media_size = \"8x30\", ebct = 20, model = \"Zachman\") #> Warning: Missing value for alkalinity. Carbonate balance will not be calculated. #> Warning: Major ions missing and neither TDS or conductivity entered. Ideal conditions will be assumed. Ionic strength will be set to NA and activity coefficients in future calculations will be set to 1.  # \\donttest{ example_df <- water_df %>%   define_water_df() %>%   gacrun_toc_df() # }"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/leadsol_constants.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame of equilibrium constants for lead and copper solubility — leadsol_constants","title":"Data frame of equilibrium constants for lead and copper solubility — leadsol_constants","text":"dataset containing equilibrium constants lead solubility","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/leadsol_constants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame of equilibrium constants for lead and copper solubility — leadsol_constants","text":"","code":"leadsol_constants"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/leadsol_constants.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data frame of equilibrium constants for lead and copper solubility — leadsol_constants","text":"dataframe 38 rows 3 columns Solids: species_name Name lead solid complex possible _letter cite different references constant_name Reference ID constants log_value Equilibrium constant log value source Source equilibrium constant value","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/leadsol_constants.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data frame of equilibrium constants for lead and copper solubility — leadsol_constants","text":"Benjamin (2010) Lothenbach et al. (1999) Nasanen & Lindell (1976) Powell et al. (2009) Powell et al. (2005) Schock et al. (1996) Topolska et al. (2016) Xie & Giammar (2007) Zhu et al. (2015) Wahman et al. (2021) See references list : https://github.com/BrownandCaldwell-Public/tidywater/wiki/References","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/modify_water.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify slots in a water class object — modify_water","title":"Modify slots in a water class object — modify_water","text":"function modifies selected slots water class object without impacting parameters. example, can manually update \"tthm\" new speciation calculated. function designed make sure parameters stored correct units manually updating water. slots modified function interconnected many others (usually pH dependent, eg, hco3). parameters, update define_water.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/modify_water.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify slots in a water class object — modify_water","text":"","code":"modify_water(water, slot, value, units)  modify_water_df(   df,   input_water = \"defined\",   output_water = \"modified\",   slot = \"use_col\",   value = \"use_col\",   units = \"use_col\" )"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/modify_water.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify slots in a water class object — modify_water","text":"water water class object slot vector slots water modify, eg, \"tthm\" value vector new values modified slots units vector units value entered, typically one c(\"mg/L\", \"ug/L\", \"M\", \"cm-1\"). ions units supported convert_units allowed. organic carbon, one \"mg/L\", \"ug/L\". uv254 one \"cm-1\", \"m-1\". DBPs, one \"ug/L\" \"mg/L\". df data frame containing water class column, already computed using define_water_df input_water name column water class data used input function. Default \"defined_water\". output_water name output column storing updated parameters class, water. Default \"modified_water\".","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/modify_water.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify slots in a water class object — modify_water","text":"data frame containing columns selected parameters list water class objects. modify_water_df returns data frame containing water class column updated slot","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/modify_water.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify slots in a water class object — modify_water","text":"","code":"water1 <- define_water(ph = 7, alk = 100, tds = 100, toc = 5) %>%   modify_water(slot = \"toc\", value = 4, units = \"mg/L\") #> Warning: Missing value for DOC. Default value of 95% of TOC will be used.  water2 <- define_water(ph = 7, alk = 100, tds = 100, toc = 5, ca = 10) %>%   modify_water(slot = c(\"ca\", \"toc\"), value = c(20, 10), units = c(\"mg/L\", \"mg/L\")) #> Warning: Missing values for magnesium and total hardness but calcium supplied. Default ratio of 65% Ca2+ and 35% Mg2+ will be used. #> Warning: Missing value for DOC. Default value of 95% of TOC will be used.   example_df <- water_df %>%   define_water_df() %>%   dplyr::mutate(bromide = 50) %>%   modify_water_df(slot = \"br\", value = bromide, units = \"ug/L\")  example_df <- water_df %>%   define_water_df() %>%   modify_water_df(     slot = c(\"br\", \"na\"),     value = c(50, 60),     units = c(\"ug/L\", \"mg/L\")   )"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/mweights.html","id":null,"dir":"Reference","previous_headings":"","what":"Molar weights of relevant compounds — mweights","title":"Molar weights of relevant compounds — mweights","text":"dataset containing molar weights several compounds g/mol. Column names lowercase chemical formulas (charge), exception following coagulants: alum = Al2(SO4)314H2O, ferricchloride = FeCl3, ferricsulfate = Fe2(SO4)38.8H2O,","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/mweights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Molar weights of relevant compounds — mweights","text":"","code":"mweights"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/mweights.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Molar weights of relevant compounds — mweights","text":"dataframe one row one column per compound","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/opensys_ph.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate pH for water in an open system — opensys_ph","title":"Calculate pH for water in an open system — opensys_ph","text":"Calculates new water quality (pH, alkalinity, pH dependent ions) water open system CO2(aq) equilibrium atmospheric CO2. function takes object class \"water\" partial pressure CO2, returns water class object updated water slots. single water, use opensys_ph; apply model dataframe, use opensys_ph_df. arguments, `_df helper \"use_col\" default looks column name dataframe. argument can specified directly function instead unquoted column name can provided.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/opensys_ph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate pH for water in an open system — opensys_ph","text":"","code":"opensys_ph(water, partialpressure = 10^-3.42)  opensys_ph_df(   df,   input_water = \"defined\",   output_water = \"opensys\",   pluck_cols = FALSE,   water_prefix = TRUE,   partialpressure = \"use_col\" )"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/opensys_ph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate pH for water in an open system — opensys_ph","text":"water Source water class \"water\" created define_water partialpressure Partial pressure CO2 air atm. Default 10^-3.5 atm, approximately Pco2 sea level. df data frame containing water class column, already computed using define_water_df. df may include column names chemicals dosed. input_water name column water class data used input function. Default \"defined\". output_water name output column storing updated water class object. Default \"opensys\". pluck_cols Extract water slots modified function (ph, alk) new numeric columns easy access. Default FALSE. water_prefix Append output_water name start plucked columns. Default TRUE.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/opensys_ph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate pH for water in an open system — opensys_ph","text":"water updated pH/alk/etc. opensys_ph_df returns data frame containing water class column updated ph alk (pH dependent ions). Optionally, also adds columns slots individually.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/opensys_ph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate pH for water in an open system — opensys_ph","text":"opensys_ph uses equilibrium concentration CO2(aq) determine concentrations carbonate species water pH solving CO2 dose results H2CO3 concentration equal CO2(aq).","code":""},{"path":[]},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/opensys_ph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate pH for water in an open system — opensys_ph","text":"","code":"water <- define_water(ph = 7, temp = 25, alk = 5) %>%   opensys_ph() #> Warning: Major ions missing and neither TDS or conductivity entered. Ideal conditions will be assumed. Ionic strength will be set to NA and activity coefficients in future calculations will be set to 1.  # \\donttest{ example_df <- water_df %>%   define_water_df() %>%   opensys_ph_df(     input_water = \"defined\", output_water = \"opensys\",     partialpressure = 10^-4, pluck_cols = TRUE   ) # }"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/ozonate_bromate.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate bromate formation — ozonate_bromate","title":"Calculate bromate formation — ozonate_bromate","text":"Calculates bromate (BrO3-, ug/L) formation based selected model. Required arguments include object class \"water\" created define_water ozone dose, reaction time, desired model. function also requires additional water quality parameters defined define_water including bromide, DOC UV254 (depending model), pH, alkalinity (depending model), optionally, ammonia (added defining water using tot_nh3 argument.) single water use ozonate_bromate; dataframe use ozonate_bromate_df. Use pluck_cols = TRUE get values output water new dataframe columns. arguments _df helper \"use_col\" default looks column name dataframe. argument can specified directly function instead unquoted column name can provided.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/ozonate_bromate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate bromate formation — ozonate_bromate","text":"","code":"ozonate_bromate(water, dose, time, model = \"Ozekin\")  ozonate_bromate_df(   df,   input_water = \"defined\",   output_water = \"ozonated\",   pluck_cols = FALSE,   water_prefix = TRUE,   dose = \"use_col\",   time = \"use_col\",   model = \"use_col\" )"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/ozonate_bromate.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Calculate bromate formation — ozonate_bromate","text":"Ozekin (1994), Sohn et al (2004), Song et al (1996), Galey et al (1997), Siddiqui et al (1994) See references list : https://github.com/BrownandCaldwell-Public/tidywater/wiki/References","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/ozonate_bromate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate bromate formation — ozonate_bromate","text":"water Source water object class \"water\" created define_water dose Applied ozone dose (mg/L O3). Results typically valid 1-10 mg/L, varies depending model. time Reaction time (minutes). Results typically valid 1-120 minutes, varies depending model. model Model apply. One c(\"Ozekin\", \"Sohn\", \"Song\", \"Galey\", \"Siddiqui\") df data frame containing water class column, already computed using define_water_df. df may include column named applied chlorine dose (cl2), column time minutes. input_water name column water class data used input function. Default \"defined\". output_water name output column storing updated water class object. Default \"ozonated\". pluck_cols Extract water slots modified function (bro3) new numeric columns easy access. Default FALSE. water_prefix Append output_water name start plucked columns. Default TRUE.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/ozonate_bromate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate bromate formation — ozonate_bromate","text":"ozonate_bromate returns single water class object calculated bromate (ug/L). ozonate_bromate_df returns data frame containing water class column updated bro3 concentration. Optionally, also adds columns slots individually.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/ozonate_bromate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate bromate formation — ozonate_bromate","text":"","code":"example_dbp <- define_water(8, 20, 66, toc = 4, uv254 = .2, br = 50) %>%   ozonate_bromate(dose = 1.5, time = 5, model = \"Ozekin\") #> Warning: Missing value for DOC. Default value of 95% of TOC will be used. #> Warning: Major ions missing and neither TDS or conductivity entered. Ideal conditions will be assumed. Ionic strength will be set to NA and activity coefficients in future calculations will be set to 1. example_dbp <- define_water(7.5, 20, 66, toc = 4, uv254 = .2, br = 50) %>%   ozonate_bromate(dose = 3, time = 15, model = \"Sohn\") #> Warning: Missing value for DOC. Default value of 95% of TOC will be used. #> Warning: Major ions missing and neither TDS or conductivity entered. Ideal conditions will be assumed. Ionic strength will be set to NA and activity coefficients in future calculations will be set to 1.   example_df <- water_df %>%   dplyr::slice_head(n = 6) %>%   dplyr::mutate(br = 50) %>%   define_water_df() %>%   dplyr::mutate(     dose = c(seq(.5, 3, .5)),     OzoneTime = 30   ) %>%   ozonate_bromate_df(time = OzoneTime, model = \"Sohn\", pluck_cols = TRUE)"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/pac_toc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate DOC Concentration in PAC system — pac_toc","title":"Calculate DOC Concentration in PAC system — pac_toc","text":"Calculates DOC concentration multiple linear regression model found 2-METHYLISOBORNEOL NATURAL ORGANIC MATTER ADSORPTION POWDERED ACTIVATED CARBON HYUKJIN CHO (2007). Assumes particulate TOC removed PAC removed; therefore TOC = DOC output. single water use pac_toc; dataframe use pac_toc_df. Use pluck_cols = TRUE get values output water new dataframe columns. arguments _df helper \"use_col\" default looks column name dataframe. argument can specified directly function instead unquoted column name can provided. water must contain DOC TOC value.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/pac_toc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate DOC Concentration in PAC system — pac_toc","text":"","code":"pac_toc(water, dose, time, type = \"bituminous\")  pac_toc_df(   df,   input_water = \"defined\",   output_water = \"paced\",   pluck_cols = FALSE,   water_prefix = TRUE,   dose = \"use_col\",   time = \"use_col\",   type = \"use_col\" )"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/pac_toc.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Calculate DOC Concentration in PAC system — pac_toc","text":"See references list : https://github.com/BrownandCaldwell-Public/tidywater/wiki/References CHO(2007)","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/pac_toc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate DOC Concentration in PAC system — pac_toc","text":"water Source water object class \"water\" created define_water dose Applied PAC dose (mg/L). Model results valid doses concentrations 5 30 mg/L. time Contact time (minutes). Model results valid reaction times 10 1440 minutes type Type PAC applied, either \"bituminous\", \"lignite\", \"wood\". df data frame containing water class column, already computed using define_water_df. df may include columns named dose, time, type input_water name column water class data used input function. Default \"defined\". output_water name output column storing updated water class object. Default \"paced\". Pronouced P..ceed (ideal know). pluck_cols Extract water slots modified function (doc, toc, uv254) new numeric columns easy access. Default FALSE. water_prefix Append output_water name start plucked columns. Default TRUE.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/pac_toc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate DOC Concentration in PAC system — pac_toc","text":"pac_toc returns water class object updated DOC, TOC, UV254 slots. pac_toc_df returns data frame containing water class column updated DOC, TOC, UV254 concentrations. Optionally, also adds columns slots individually.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/pac_toc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate DOC Concentration in PAC system — pac_toc","text":"function calculate DOC concentration PAC adsorption drinking water treatment. UV254 concentrations predicted based linear relationship DOC.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/pac_toc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate DOC Concentration in PAC system — pac_toc","text":"","code":"water <- define_water(toc = 2.5, uv254 = .05, doc = 1.5) %>%   pac_toc(dose = 15, time = 50, type = \"wood\") #> Warning: Missing value for pH. Carbonate balance will not be calculated. #> Warning: Missing value for alkalinity. Carbonate balance will not be calculated. #> Warning: Major ions missing and neither TDS or conductivity entered. Ideal conditions will be assumed. Ionic strength will be set to NA and activity coefficients in future calculations will be set to 1.   example_df <- water_df %>%   define_water_df(\"raw\") %>%   dplyr::mutate(dose = seq(11, 22, 1), PACTime = 30) %>%   pac_toc_df(input_water = \"raw\", time = PACTime, type = \"wood\", pluck_cols = TRUE)"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/pactoccoeffs.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame of PAC TOC model coefficients — pactoccoeffs","title":"Data frame of PAC TOC model coefficients — pactoccoeffs","text":"dataset containing coefficients calculating PAC TOC removal","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/pactoccoeffs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame of PAC TOC model coefficients — pactoccoeffs","text":"","code":"pactoccoeffs"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/pactoccoeffs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data frame of PAC TOC model coefficients — pactoccoeffs","text":"dataframe 4 rows 3 columns pactype Specifies PAC type Constant PAC model Coefficient PAC model, associated DOC0 b Coefficient PAC model, associated dose c Coefficient PAC model, associated time","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/pactoccoeffs.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data frame of PAC TOC model coefficients — pactoccoeffs","text":"Cho (2007)","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/plot_ions.html","id":null,"dir":"Reference","previous_headings":"","what":"Create summary plot of ions from water class — plot_ions","title":"Create summary plot of ions from water class — plot_ions","text":"function takes water data frame defined define_water outputs ion balance plot.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/plot_ions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create summary plot of ions from water class — plot_ions","text":"","code":"plot_ions(water)"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/plot_ions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create summary plot of ions from water class — plot_ions","text":"water Source water vector created link function ","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/plot_ions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create summary plot of ions from water class — plot_ions","text":"ggplot object displaying water's ion balance.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/plot_ions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create summary plot of ions from water class — plot_ions","text":"","code":"# \\donttest{ water <- define_water(7, 20, 50, 100, 20, 10, 10, 10, 10, tot_po4 = 1) plot_ions(water)  # }"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/plot_lead.html","id":null,"dir":"Reference","previous_headings":"","what":"Create dissolved lead and DIC contour plot given input data frame — plot_lead","title":"Create dissolved lead and DIC contour plot given input data frame — plot_lead","text":"function takes data frame outputs contour plot dissolved lead DIC plot. Assumes range pH dissolved inorganic carbon (DIC) occurs single temperature TDS.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/plot_lead.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create dissolved lead and DIC contour plot given input data frame — plot_lead","text":"","code":"plot_lead(df, temp, tds, ph_range, dic_range)"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/plot_lead.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create dissolved lead and DIC contour plot given input data frame — plot_lead","text":"df Source data data frame. Must pH DIC columns. Columns containing single temperature TDS can also included. temp Temperature used calculate dissolved lead concentrations. Defaults column df. tds Total dissolved solids used calculate dissolved lead concentrations. Defaults column df. ph_range Optional argument modify plotted pH range. Input c(minimum pH, maximum pH). dic_range Optional argument modify plotted DIC range. Input c(minimum DIC, maximum DIC).","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/plot_lead.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create dissolved lead and DIC contour plot given input data frame — plot_lead","text":"ggplot object displaying contour plot dissolved lead, pH, DIC","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/plot_lead.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create dissolved lead and DIC contour plot given input data frame — plot_lead","text":"","code":"# \\donttest{ historical <- data.frame(   ph = c(7.7, 7.86, 8.31, 7.58, 7.9, 8.06, 7.95, 8.02, 7.93, 7.61),   dic = c(     14.86, 16.41, 16.48, 16.63, 16.86, 16.94, 17.05, 17.23,     17.33, 17.34   ),   temp = 25,   tds = 200 ) plot_lead(historical)  # }"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/pluck_water.html","id":null,"dir":"Reference","previous_headings":"","what":"Pluck out a single parameter from a water class object — pluck_water","title":"Pluck out a single parameter from a water class object — pluck_water","text":"function plucks one selected parameters selected columns water class objects. names output columns follow form water_parameter","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/pluck_water.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pluck out a single parameter from a water class object — pluck_water","text":"","code":"pluck_water(df, input_waters = c(\"defined\"), parameter)"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/pluck_water.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pluck out a single parameter from a water class object — pluck_water","text":"df data frame containing water class column, already computed using define_water input_waters vector names columns water class data used input function. parameter vector water class parameters view outside water column. Can also specify \"\" get non-NA water slots.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/pluck_water.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pluck out a single parameter from a water class object — pluck_water","text":"data frame containing columns selected parameters list water class objects.","code":""},{"path":[]},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/pluck_water.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pluck out a single parameter from a water class object — pluck_water","text":"","code":"pluck_example <- water_df %>%   define_water_df(\"raw\") %>%   pluck_water(input_waters = c(\"raw\"), parameter = c(\"hco3\", \"doc\"))"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/regulate_toc.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine if TOC removal meets Stage 1 DBP Rule requirements — regulate_toc","title":"Determine if TOC removal meets Stage 1 DBP Rule requirements — regulate_toc","text":"function takes raw water alkalinity, raw water TOC, finished water TOC. calculates TOC removal percentage checks compliance Stage 1 DBP Rule.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/regulate_toc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine if TOC removal meets Stage 1 DBP Rule requirements — regulate_toc","text":"","code":"regulate_toc(alk_raw, toc_raw, toc_finished)  regulate_toc_df(   df,   alk_raw = \"use_col\",   toc_raw = \"use_col\",   toc_finished = \"use_col\" )"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/regulate_toc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine if TOC removal meets Stage 1 DBP Rule requirements — regulate_toc","text":"alk_raw Raw water alkalinity (mg/L calcium carbonate). toc_raw Raw water total organic carbon (mg/L). toc_finished Finished water total organic carbon (mg/L). df data frame optionally containing columns raw water alkalinity, raw water TOC, finished water TOC","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/regulate_toc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine if TOC removal meets Stage 1 DBP Rule requirements — regulate_toc","text":"data frame containing TOC removal compliance status. data frame compliance status, removal percent, optional note columns.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/regulate_toc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine if TOC removal meets Stage 1 DBP Rule requirements — regulate_toc","text":"function prints input parameters calculated removal percentage TOC. checks compliance regulations considering raw TOC, alkalinity, removal percentage. conditions met, prints \"compliance\"; otherwise, prints \"compliance\" stops execution error message.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/regulate_toc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine if TOC removal meets Stage 1 DBP Rule requirements — regulate_toc","text":"","code":"regulate_toc(50, 5, 2) #>   toc_compliance_status toc_removal_percent #> 1         In Compliance                  60   regulated <- water_df %>%   dplyr::select(toc_raw = toc, alk_raw = alk) %>%   regulate_toc_df(toc_finished = seq(0, 1.2, 0.1)) #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies.  regulated <- water_df %>%   define_water_df() %>%   chemdose_ph_df(alum = 30, output_water = \"dosed\") %>%   chemdose_toc_df(\"dosed\") %>%   pluck_water(c(\"coagulated\", \"defined\"), c(\"toc\", \"alk\")) %>%   dplyr::select(toc_finished = coagulated_toc, toc_raw = defined_toc, alk_raw = defined_alk) %>%   regulate_toc_df() #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies. #> Warning: Raw water TOC < 2 mg/L. No regulation applies."},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/rename_helpers.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions renamed in tidywater 0.10.0 — rename_helpers","title":"Functions renamed in tidywater 0.10.0 — rename_helpers","text":"tidywater 0.10.0 renamed several helper functions simplify naming match tidyverse conventions _chain -> _df functions return water: _once -> _df(pluck_cols = TRUE) functions numeric outputs: _once -> _df()","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/rename_helpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions renamed in tidywater 0.10.0 — rename_helpers","text":"","code":"balance_ions_chain(   df,   input_water = \"defined_water\",   output_water = \"balanced_water\",   anion = \"cl\",   cation = \"na\" )  biofilter_toc_chain(   df,   input_water = \"defined_water\",   output_water = \"biofiltered_water\",   ebct = \"use_col\",   ozonated = \"use_col\" )  blend_waters_chain(df, waters, ratios, output_water = \"blended_water\")  chemdose_chloramine_chain(   df,   input_water = \"defined_water\",   output_water = \"chlorinated_water\",   time = \"use_col\",   cl2 = \"use_col\",   nh3 = \"use_col\",   use_free_cl_slot = \"use_col\",   use_tot_nh3_slot = \"use_col\" )  chemdose_chlordecay_chain(   df,   input_water = \"defined_water\",   output_water = \"disinfected_water\",   cl2_dose = \"use_col\",   time = \"use_col\",   treatment = \"use_col\",   cl_type = \"use_col\",   use_chlorine_slot = \"use_col\" )  chemdose_dbp_chain(   df,   input_water = \"defined_water\",   output_water = \"disinfected_water\",   cl2 = \"use_col\",   time = \"use_col\",   treatment = \"use_col\",   cl_type = \"use_col\",   location = \"use_col\",   correction = TRUE,   coeff = NULL )  chemdose_ph_chain(   df,   input_water = \"defined_water\",   output_water = \"dosed_chem_water\",   hcl = \"use_col\",   h2so4 = \"use_col\",   h3po4 = \"use_col\",   hno3 = \"use_col\",   co2 = \"use_col\",   naoh = \"use_col\",   na2co3 = \"use_col\",   nahco3 = \"use_col\",   caoh2 = \"use_col\",   mgoh2 = \"use_col\",   caocl2 = \"use_col\",   cacl2 = \"use_col\",   cl2 = \"use_col\",   naocl = \"use_col\",   nh4oh = \"use_col\",   nh42so4 = \"use_col\",   caco3 = \"use_col\",   caso4 = \"use_col\",   alum = \"use_col\",   ferricchloride = \"use_col\",   ferricsulfate = \"use_col\",   ach = \"use_col\",   kmno4 = \"use_col\",   naf = \"use_col\",   na3po4 = \"use_col\",   softening_correction = \"use_col\",   na_to_zero = TRUE )  chemdose_toc_chain(   df,   input_water = \"defined_water\",   output_water = \"coagulated_water\",   alum = \"use_col\",   ferricchloride = \"use_col\",   ferricsulfate = \"use_col\",   coeff = \"use_col\" )  define_water_chain(df, output_water = \"defined_water\")  decarbonate_ph_chain(   df,   input_water = \"defined_water\",   output_water = \"decarbonated_water\",   co2_removed = \"use_col\" )  modify_water_chain(   df,   input_water = \"defined_water\",   output_water = \"modified_water\",   slot = \"use_col\",   value = \"use_col\",   units = \"use_col\" )  ozonate_bromate_chain(   df,   input_water = \"defined_water\",   output_water = \"ozonated_water\",   dose = \"use_col\",   time = \"use_col\",   model = \"use_col\" )  pac_toc_chain(   df,   input_water = \"defined_water\",   output_water = \"pac_water\",   dose = \"use_col\",   time = \"use_col\",   type = \"use_col\" )  calculate_corrosion_once(   df,   input_water = \"defined_water\",   index = c(\"aggressive\", \"ryznar\", \"langelier\", \"ccpp\", \"larsonskold\", \"csmr\"),   form = \"calcite\" )  chemdose_dbp_once(   df,   input_water = \"defined_water\",   cl2 = \"use_col\",   time = \"use_col\",   treatment = \"use_col\",   cl_type = \"use_col\",   location = \"use_col\",   correction = TRUE,   coeff = NULL,   water_prefix = TRUE )  chemdose_ph_once(   df,   input_water = \"defined_water\",   hcl = \"use_col\",   h2so4 = \"use_col\",   h3po4 = \"use_col\",   hno3 = \"use_col\",   co2 = \"use_col\",   naoh = \"use_col\",   na2co3 = \"use_col\",   nahco3 = \"use_col\",   caoh2 = \"use_col\",   mgoh2 = \"use_col\",   caocl2 = \"use_col\",   cacl2 = \"use_col\",   cl2 = \"use_col\",   naocl = \"use_col\",   nh4oh = \"use_col\",   nh42so4 = \"use_col\",   caco3 = \"use_col\",   caso4 = \"use_col\",   alum = \"use_col\",   ferricchloride = \"use_col\",   ferricsulfate = \"use_col\",   ach = \"use_col\",   kmno4 = \"use_col\",   naf = \"use_col\",   na3po4 = \"use_col\" )  chemdose_toc_once(   df,   input_water = \"defined_water\",   output_water = \"coagulated_water\",   alum = \"use_col\",   ferricchloride = \"use_col\",   ferricsulfate = \"use_col\",   coeff = \"use_col\" )  define_water_once(df)  dissolve_cu_once(df, input_water = \"defined_water\")  dissolve_pb_once(   df,   input_water = \"defined_water\",   output_col_solid = \"controlling_solid\",   output_col_result = \"pb\",   hydroxypyromorphite = \"Schock\",   pyromorphite = \"Topolska\",   laurionite = \"Nasanen\",   water_prefix = TRUE )  solvect_chlorine_once(   df,   input_water = \"defined_water\",   time = \"use_col\",   residual = \"use_col\",   baffle = \"use_col\",   free_cl_slot = \"residual_only\",   water_prefix = TRUE )  solvect_o3_once(   df,   input_water = \"defined_water\",   time = \"use_col\",   dose = \"use_col\",   kd = \"use_col\",   baffle = \"use_col\",   water_prefix = TRUE )  solvedose_alk_once(   df,   input_water = \"defined_water\",   output_column = \"dose_required\",   target_alk = \"use_col\",   chemical = \"use_col\" )  solvedose_ph_once(   df,   input_water = \"defined_water\",   output_column = \"dose_required\",   target_ph = \"use_col\",   chemical = \"use_col\" )  solveresid_o3_once(   df,   input_water = \"defined_water\",   output_column = \"o3resid\",   dose = \"use_col\",   time = \"use_col\" )"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvecost_chem.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine chemical cost — solvecost_chem","title":"Determine chemical cost — solvecost_chem","text":"function takes chemical dose mg/L, plant flow, chemical strength, $/lb calculates cost.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvecost_chem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine chemical cost — solvecost_chem","text":"","code":"solvecost_chem(dose, flow, strength = 100, cost, time = \"day\")"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvecost_chem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine chemical cost — solvecost_chem","text":"dose Chemical dose mg/L chemical flow Plant flow MGD strength Chemical product strength percent. Defaults 100 percent. cost Chemical product cost $/lb time Desired output units, one c(\"day\", \"month\", \"year\"). Defaults \"day\".","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvecost_chem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine chemical cost — solvecost_chem","text":"numeric value chemical cost, $/time.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvecost_chem.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine chemical cost — solvecost_chem","text":"","code":"alum_cost <- solvecost_chem(dose = 20, flow = 10, strength = 49, cost = .22)  cost_data <- data.frame(   dose = seq(10, 50, 10),   flow = 10 ) %>%   dplyr::mutate(costs = solvecost_chem(dose = dose, flow = flow, strength = 49, cost = .22))"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvecost_labor.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine labor cost — solvecost_labor","title":"Determine labor cost — solvecost_labor","text":"function takes number FTE annual $/FTE determines labor cost","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvecost_labor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine labor cost — solvecost_labor","text":"","code":"solvecost_labor(fte, cost, time = \"day\")"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvecost_labor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine labor cost — solvecost_labor","text":"fte Number FTEs. Can decimal. cost $/year per FTE time Desired output units, one c(\"day\", \"month\", \"year\"). Defaults \"day\".","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvecost_labor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine labor cost — solvecost_labor","text":"numeric value labor $/time.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvecost_labor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine labor cost — solvecost_labor","text":"","code":"laborcost <- solvecost_labor(1.5, 50000)  cost_data <- data.frame(   fte = seq(1, 10, 1) ) %>%   dplyr::mutate(costs = solvecost_labor(fte = fte, cost = .08))"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvecost_power.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine power cost — solvecost_power","title":"Determine power cost — solvecost_power","text":"function takes kW, % utilization, $/kWhr determines power cost.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvecost_power.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine power cost — solvecost_power","text":"","code":"solvecost_power(power, utilization = 100, cost, time = \"day\")"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvecost_power.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine power cost — solvecost_power","text":"power Power consumed kW utilization Amount time equipment running percent. Defaults continuous. cost Power cost $/kWhr time Desired output units, one c(\"day\", \"month\", \"year\"). Defaults \"day\".","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvecost_power.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine power cost — solvecost_power","text":"numeric value power, $/time.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvecost_power.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine power cost — solvecost_power","text":"","code":"powercost <- solvecost_power(50, 100, .08)  cost_data <- data.frame(   power = seq(10, 50, 10),   utilization = 80 ) %>%   dplyr::mutate(costs = solvecost_power(power = power, utilization = utilization, cost = .08))"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvecost_solids.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine solids disposal cost — solvecost_solids","title":"Determine solids disposal cost — solvecost_solids","text":"function takes coagulant doses mg/L chemical, removed turbidity, cost ($/lb) determine disposal cost.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvecost_solids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine solids disposal cost — solvecost_solids","text":"","code":"solvecost_solids(   alum = 0,   ferricchloride = 0,   ferricsulfate = 0,   flow,   toc_removed = 0,   caco3_removed = 0,   turb,   b = 1.5,   cost,   time = \"day\" )"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvecost_solids.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Determine solids disposal cost — solvecost_solids","text":"https://water.mecc.edu/courses/ENV295Residuals/lesson3b.htm#:~:text=%20the%20diagram%2C%20for%20example,million%20gallons%20of%20water%20produced.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvecost_solids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine solids disposal cost — solvecost_solids","text":"alum Hydrated aluminum sulfate Al2(SO4)3*14H2O + 6HCO3 -> 2Al(OH)3() +3SO4 + 14H2O + 6CO2 ferricchloride Ferric Chloride FeCl3 + 3HCO3 -> Fe(OH)3() + 3Cl + 3CO2 ferricsulfate Amount ferric sulfate added mg/L: Fe2(SO4)3*8.8H2O + 6HCO3 -> 2Fe(OH)3() + 3SO4 + 8.8H2O + 6CO2 flow Plant flow MGD toc_removed Amount total organic carbon removed treatment process mg/L caco3_removed Amount hardness removed softening mg/L CaCO3 turb Turbidity removed NTU b Correlation factor turbidity suspended solids. Defaults 1.5. cost Disposal cost $/lb time Desired output units, one c(\"day\", \"month\", \"year\"). Defaults \"day\".","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvecost_solids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine solids disposal cost — solvecost_solids","text":"numeric value disposal costs, $/time.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvecost_solids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine solids disposal cost — solvecost_solids","text":"","code":"alum_solidscost <- solvecost_solids(alum = 50, flow = 10, turb = 2, cost = 0.05)  cost_data <- data.frame(   alum = seq(10, 50, 10),   flow = 10 ) %>%   dplyr::mutate(costs = solvecost_solids(alum = alum, flow = flow, turb = 2, cost = 0.05))"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvect_chlorine.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine disinfection credit from chlorine. — solvect_chlorine","title":"Determine disinfection credit from chlorine. — solvect_chlorine","text":"function takes water defined define_water disinfection parameters outputs data frame required CT (ct_required), actual CT (ct_actual), giardia log removal (glog_removal). single water, use solvect_chlorine; apply model dataframe, use solvect_chlorine_df. arguments, _df helpers \"use_col\" default looks column name dataframe. argument can specified directly function instead unquoted column name can provided.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvect_chlorine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine disinfection credit from chlorine. — solvect_chlorine","text":"","code":"solvect_chlorine(water, time, residual, baffle, free_cl_slot = \"residual_only\")  solvect_chlorine_df(   df,   input_water = \"defined\",   time = \"use_col\",   residual = \"use_col\",   baffle = \"use_col\",   free_cl_slot = \"residual_only\",   water_prefix = TRUE )"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvect_chlorine.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Determine disinfection credit from chlorine. — solvect_chlorine","text":"Smith et al. (1995) USEPA (2020) USEPA (1991) See references list : https://github.com/BrownandCaldwell-Public/tidywater/wiki/References","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvect_chlorine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine disinfection credit from chlorine. — solvect_chlorine","text":"water Source water object class \"water\" created define_water. Water must include ph temp time Retention time disinfection segment minutes. residual Minimum chlorine residual disinfection segment mg/L Cl2. baffle Baffle factor - unitless value 0 1. free_cl_slot Defaults \"residual_only\", uses residual argument. \"slot_only\", model use free_chlorine slot input water. \"sum_with_residual\", use sum residual argument free_chlorine slot. df data frame containing water class column, already computed using define_water_df input_water name column Water class data used input function. Default \"defined_water\". water_prefix name input water used calculation appended start output columns. Default TRUE.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvect_chlorine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine disinfection credit from chlorine. — solvect_chlorine","text":"solvect_chlorine returns data frame containing required CT (mg/Lmin), actual CT (mg/Lmin), giardia log removal, virus log removal. solvect_chlorine_df returns data frame containing original data frame columns required CT, actual CT, giardia log removal.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvect_chlorine.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine disinfection credit from chlorine. — solvect_chlorine","text":"CT actual function time, chlorine residual, baffle factor, whereas CT required function pH, temperature, chlorine residual, standard 0.5 log removal giardia requirement.  CT required empirical regression equation developed Smith et al. (1995) provide conservative estimates CT tables USEPA Disinfection Profiling Guidance. Log removal rearrangement CT equations.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvect_chlorine.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine disinfection credit from chlorine. — solvect_chlorine","text":"","code":"example_ct <- define_water(ph = 7.5, temp = 25) %>%   solvect_chlorine(time = 30, residual = 1, baffle = 0.7) #> Warning: Missing value for alkalinity. Carbonate balance will not be calculated. #> Warning: Major ions missing and neither TDS or conductivity entered. Ideal conditions will be assumed. Ionic strength will be set to NA and activity coefficients in future calculations will be set to 1. ct_calc <- water_df %>%   define_water_df() %>%   solvect_chlorine_df(residual = 2, time = 10, baffle = .5) #> Warning: Virus log removal estimated to closest temperature in EPA Guidance Manual Table E-7 #> Warning: Virus log removal estimated to closest temperature in EPA Guidance Manual Table E-7 #> Warning: Virus log removal estimated to closest temperature in EPA Guidance Manual Table E-7 #> Warning: Virus log removal estimated to closest temperature in EPA Guidance Manual Table E-7  chlor_resid <- water_df %>%   dplyr::mutate(br = 50) %>%   define_water_df() %>%   dplyr::mutate(     residual = seq(1, 12, 1),     time = seq(2, 24, 2),     baffle = 0.7   ) %>%   solvect_chlorine_df() #> Warning: Virus log removal estimated to closest temperature in EPA Guidance Manual Table E-7 #> Warning: Virus log removal estimated to closest temperature in EPA Guidance Manual Table E-7 #> Warning: Virus log removal estimated to closest temperature in EPA Guidance Manual Table E-7 #> Warning: Virus log removal estimated to closest temperature in EPA Guidance Manual Table E-7"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvect_o3.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine disinfection credit from ozone. — solvect_o3","title":"Determine disinfection credit from ozone. — solvect_o3","text":"function takes water defined define_water() first order decay curve parameters ozone dose outputs dataframe actual CT, log removal giardia, virus, crypto. single water, use solvect_o3; apply model dataframe, use solvect_o3_df. arguments, _df helper \"use_col\" default looks column name dataframe. argument can specified directly function instead unquoted column name can provided.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvect_o3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine disinfection credit from ozone. — solvect_o3","text":"","code":"solvect_o3(water, time, dose, kd, baffle)  solvect_o3_df(   df,   input_water = \"defined\",   time = \"use_col\",   dose = \"use_col\",   kd = \"use_col\",   baffle = \"use_col\",   water_prefix = TRUE )"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvect_o3.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Determine disinfection credit from ozone. — solvect_o3","text":"USEPA (2020) Equation 4-4 4-7 https://www.epa.gov/system/files/documents/2022-02/disprof_bench_3rules_final_508.pdf See references list : https://github.com/BrownandCaldwell-Public/tidywater/wiki/References","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvect_o3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine disinfection credit from ozone. — solvect_o3","text":"water Source water object class \"water\" created define_water(). Water must include ph temp time Retention time disinfection segment minutes. dose Ozone dose mg/L. value can also y intercept decay curve (often slightly lower ozone dose.) kd First order decay constant. parameter optional. specified, default ozone decay equations used. baffle Baffle factor - unitless value 0 1. df data frame containing water class column, already computed using define_water_df(). input_water name column Water class data used input function. Default \"defined_water\". water_prefix name input water used calculation appended start output columns. Default TRUE.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvect_o3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine disinfection credit from ozone. — solvect_o3","text":"solvect_o3 returns data frame containing actual CT (mg/L*min), giardia log removal, virus log removal, crypto log removal. solvect_o3_df returns data frame containing original data frame columns required CT, actual CT, giardia log removal.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvect_o3.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine disinfection credit from ozone. — solvect_o3","text":"First order decay curve ozone form: residual = dose * exp(kd*time). kd negative number. Actual CT integration first order curve. first 30 seconds removed integral account instantaneous demand. kd specified, default decay curve used Water Treatment Plant Model (2002). model perform well ozone decay, specifying decay curve recommended.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvect_o3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine disinfection credit from ozone. — solvect_o3","text":"","code":"# Use kd from experimental data (recommended): define_water(ph = 7.5, temp = 25) %>%   solvect_o3(time = 10, dose = 2, kd = -0.5, baffle = 0.9) #> Warning: Missing value for alkalinity. Carbonate balance will not be calculated. #> Warning: Major ions missing and neither TDS or conductivity entered. Ideal conditions will be assumed. Ionic strength will be set to NA and activity coefficients in future calculations will be set to 1. #>   ct_actual glog_removal vlog_removal clog_removal #> 1  2.779426     17.22941     34.85294     1.131231 # Use modeled decay curve: define_water(ph = 7.5, alk = 100, doc = 2, uv254 = .02, br = 50) %>%   solvect_o3(time = 10, dose = 2, baffle = 0.5) #> Warning: Missing value for TOC. DOC assumed to be 95% of TOC. #> Warning: Major ions missing and neither TDS or conductivity entered. Ideal conditions will be assumed. Ionic strength will be set to NA and activity coefficients in future calculations will be set to 1. #>   ct_actual glog_removal vlog_removal clog_removal #> 1  4.624554     28.66719     57.99013     1.882201  # \\donttest{ ct_calc <- water_df %>%   dplyr::mutate(br = 50) %>%   define_water_df() %>%   dplyr::mutate(     dose = 2,     O3time = 10,   ) %>%   solvect_o3_df(time = O3time, baffle = .7) # }"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvedose_alk.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a desired chemical dose for a target alkalinity — solvedose_alk","title":"Calculate a desired chemical dose for a target alkalinity — solvedose_alk","text":"function calculates required amount chemical dose based target alkalinity existing water quality. Returns numeric value dose mg/L. Uses uniroot chemdose_ph function. single water, use solvedose_alk; apply model dataframe, use solvedose_alk_df. arguments, _df helper \"use_col\" default looks column name dataframe. argument can specified directly function instead unquoted column name can provided.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvedose_alk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a desired chemical dose for a target alkalinity — solvedose_alk","text":"","code":"solvedose_alk(water, target_alk, chemical)  solvedose_alk_df(   df,   input_water = \"defined\",   output_column = \"dose\",   target_alk = \"use_col\",   chemical = \"use_col\" )"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvedose_alk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a desired chemical dose for a target alkalinity — solvedose_alk","text":"water Source water class \"water\" created define_water target_alk final alkalinity mg/L CaCO3 achieved specified chemical added. chemical chemical added. Current supported chemicals include: acids: \"hcl\", \"h2so4\", \"h3po4\", \"co2\", bases: \"naoh\", \"na2co3\", \"nahco3\", \"caoh2\", \"mgoh2\" df data frame containing water class column, already computed using define_water_df. df may include column names chemicals dosed. input_water name column water class data used input. Default \"defined_water\". output_column name output column storing doses mg/L. Default \"dose_required\".","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvedose_alk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a desired chemical dose for a target alkalinity — solvedose_alk","text":"solvedose_alk returns numeric value required chemical dose. solvedose_alk_df returns data frame containing original data frame columns target alkalinity, chemical dosed, required chemical dose.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvedose_alk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate a desired chemical dose for a target alkalinity — solvedose_alk","text":"solvedose_alk uses stats::uniroot() chemdose_ph match required dose requested alkalinity target.","code":""},{"path":[]},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvedose_alk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate a desired chemical dose for a target alkalinity — solvedose_alk","text":"","code":"dose_required <- define_water(ph = 7.9, temp = 22, alk = 100, 80, 50) %>%   solvedose_alk(target_alk = 150, \"naoh\") #> Warning: Missing value for magnesium. Value estimated from total hardness and calcium. #> Warning: Major ions missing and neither TDS or conductivity entered. Ideal conditions will be assumed. Ionic strength will be set to NA and activity coefficients in future calculations will be set to 1.  example_df <- water_df %>%   define_water_df() %>%   dplyr::mutate(finAlk = seq(100, 210, 10)) %>%   solvedose_alk_df(chemical = \"na2co3\", target_alk = finAlk) #> Warning: Target alkalinity cannot be reached with selected chemical. NA returned. #> Warning: Target alkalinity cannot be reached with selected chemical. NA returned."},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvedose_ph.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a desired chemical dose for a target pH — solvedose_ph","title":"Calculate a desired chemical dose for a target pH — solvedose_ph","text":"Calculates required amount chemical dose based target pH existing water quality. function takes object class \"water\", user-specified chemical target pH returns numeric value required dose mg/L. single water, use solvedose_ph; apply model dataframe, use solvedose_ph_df. arguments, _df helper \"use_col\" default looks column name dataframe. argument can specified directly function instead unquoted column name can provided.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvedose_ph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a desired chemical dose for a target pH — solvedose_ph","text":"","code":"solvedose_ph(water, target_ph, chemical)  solvedose_ph_df(   df,   input_water = \"defined\",   output_column = \"dose\",   target_ph = \"use_col\",   chemical = \"use_col\" )"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvedose_ph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a desired chemical dose for a target pH — solvedose_ph","text":"water Source water class \"water\" created define_water target_ph final pH achieved specified chemical added. chemical chemical added. Current supported chemicals include: acids: \"hcl\", \"h2so4\", \"h3po4\", \"co2\"; bases: \"naoh\", \"na2co3\", \"nahco3\", \"caoh2\", \"mgoh2\" df data frame containing water class column, already computed using define_water_df. df may include column names chemicals dosed. input_water name column water class data used input. Default \"defined\". output_column name output column storing doses mg/L. Default \"dose\".","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvedose_ph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a desired chemical dose for a target pH — solvedose_ph","text":"solvedose_ph returns numeric value required chemical dose. solvedose_ph_df returns data frame containing original data frame columns target pH, chemical dosed, required chemical dose.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvedose_ph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate a desired chemical dose for a target pH — solvedose_ph","text":"solvedose_ph uses stats::uniroot() chemdose_ph match required dose requested pH target.","code":""},{"path":[]},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvedose_ph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate a desired chemical dose for a target pH — solvedose_ph","text":"","code":"water <- define_water(ph = 7, temp = 25, alk = 10) #> Warning: Major ions missing and neither TDS or conductivity entered. Ideal conditions will be assumed. Ionic strength will be set to NA and activity coefficients in future calculations will be set to 1.  # Calculate required dose of lime to reach pH 8 solvedose_ph(water, target_ph = 8, chemical = \"caoh2\") #> [1] 1.5   example_df <- water_df %>%   define_water_df() %>%   solvedose_ph_df(input_water = \"defined\", target_ph = 8.8, chemical = \"naoh\")"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvemass_chem.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert mg/L of chemical to lb/day — solvemass_chem","title":"Convert mg/L of chemical to lb/day — solvemass_chem","text":"function takes chemical dose mg/L, plant flow MGD, chemical strength calculates lb/day product","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvemass_chem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert mg/L of chemical to lb/day — solvemass_chem","text":"","code":"solvemass_chem(dose, flow, strength = 100)"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvemass_chem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert mg/L of chemical to lb/day — solvemass_chem","text":"dose Chemical dose mg/L chemical flow Plant flow MGD strength Chemical product strength percent. Defaults 100 percent.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvemass_chem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert mg/L of chemical to lb/day — solvemass_chem","text":"numeric value chemical mass lb/day.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvemass_chem.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert mg/L of chemical to lb/day — solvemass_chem","text":"","code":"alum_mass <- solvemass_chem(dose = 20, flow = 10, strength = 49)  library(dplyr) mass_data <- tibble(   dose = seq(10, 50, 10),   flow = 10 ) %>%   mutate(mass = solvemass_chem(dose = dose, flow = flow, strength = 49))"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvemass_solids.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine solids lb/day — solvemass_solids","title":"Determine solids lb/day — solvemass_solids","text":"function takes coagulant doses mg/L chemical, removed turbidity, plant flow MGD determine solids production.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvemass_solids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine solids lb/day — solvemass_solids","text":"","code":"solvemass_solids(   alum = 0,   ferricchloride = 0,   ferricsulfate = 0,   flow,   toc_removed = 0,   caco3_removed = 0,   turb,   b = 1.5 )"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvemass_solids.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Determine solids lb/day — solvemass_solids","text":"https://water.mecc.edu/courses/ENV295Residuals/lesson3b.htm#:~:text=%20the%20diagram%2C%20for%20example,million%20gallons%20of%20water%20produced.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvemass_solids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine solids lb/day — solvemass_solids","text":"alum Amount hydrated aluminum sulfate added mg/L chemical: Al2(SO4)3*14H2O + 6HCO3 -> 2Al(OH)3() +3SO4 + 14H2O + 6CO2 ferricchloride Amount ferric chloride added mg/L chemical: FeCl3 + 3HCO3 -> Fe(OH)3() + 3Cl + 3CO2 ferricsulfate Amount ferric sulfate added mg/L chemical: Fe2(SO4)3*8.8H2O + 6HCO3 -> 2Fe(OH)3() + 3SO4 + 8.8H2O + 6CO2 flow Plant flow MGD toc_removed Amount total organic carbon removed treatment process mg/L caco3_removed Amount hardness removed softening mg/L CaCO3 turb Turbidity removed NTU b Correlation factor turbidity suspended solids. Defaults 1.5.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvemass_solids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine solids lb/day — solvemass_solids","text":"numeric value solids mass lb/day.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solvemass_solids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine solids lb/day — solvemass_solids","text":"","code":"solids_mass <- solvemass_solids(alum = 50, flow = 10, turb = 20)  library(dplyr) mass_data <- tibble(   alum = seq(10, 50, 10),   flow = 10 ) %>%   mutate(mass = solvemass_solids(alum = alum, flow = flow, turb = 20)) #'"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solveresid_o3.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine ozone decay — solveresid_o3","title":"Determine ozone decay — solveresid_o3","text":"function applies ozone decay model water U.S. EPA (2001) equation 5-128. single water, use solveresid_o3; apply model dataframe, use solveresid_o3_df. arguments, _df helper \"use_col\" default looks column name dataframe. argument can specified directly function instead unquoted column name can provided.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solveresid_o3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine ozone decay — solveresid_o3","text":"","code":"solveresid_o3(water, dose, time)  solveresid_o3_df(   df,   input_water = \"defined\",   output_column = \"o3resid\",   dose = \"use_col\",   time = \"use_col\" )"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solveresid_o3.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Determine ozone decay — solveresid_o3","text":"U.S. EPA (2001) See reference list : https://github.com/BrownandCaldwell-Public/tidywater/wiki/References","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solveresid_o3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine ozone decay — solveresid_o3","text":"water Source water object class water created define_water dose Applied ozone dose mg/L time Ozone contact time minutes df data frame containing water class column, already computed using define_water_df input_water name column Water class data used input function. Default \"defined\". output_column name output column storing doses mg/L. Default \"dose_required\".","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solveresid_o3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine ozone decay — solveresid_o3","text":"solveresid_o3 returns numeric value residual ozone. solveresid_o3_df returns data frame containing original data frame columns ozone dosed, time, ozone residual.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/solveresid_o3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine ozone decay — solveresid_o3","text":"","code":"ozone_resid <- define_water(7, 20, 100, doc = 2, toc = 2.2, uv254 = .02, br = 50) %>%   solveresid_o3(dose = 2, time = 10) #> Warning: Major ions missing and neither TDS or conductivity entered. Ideal conditions will be assumed. Ionic strength will be set to NA and activity coefficients in future calculations will be set to 1.  ozone_resid <- water_df %>%   dplyr::mutate(br = 50) %>%   define_water_df() %>%   solveresid_o3_df(dose = 2, time = 10)  ozone_resid <- water_df %>%   dplyr::mutate(br = 50) %>%   define_water_df() %>%   dplyr::mutate(     dose = seq(1, 12, 1),     time = seq(2, 24, 2)   ) %>%   solveresid_o3_df()"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/summarize_wq.html","id":null,"dir":"Reference","previous_headings":"","what":"Create summary table from water class — summarize_wq","title":"Create summary table from water class — summarize_wq","text":"function takes water data frame defined define_water outputs formatted summary table specified water quality parameters. summarise_wq() summarize_wq() synonyms.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/summarize_wq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create summary table from water class — summarize_wq","text":"","code":"summarize_wq(water, params = c(\"general\"))  summarise_wq(water, params = c(\"general\"))"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/summarize_wq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create summary table from water class — summarize_wq","text":"water Source water vector created define_water. params List water quality parameters summarized. Options include \"general\", \"ions\", \"dbps\". Defaults \"general\" .","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/summarize_wq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create summary table from water class — summarize_wq","text":"knitr_kable table specified water quality parameters.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/summarize_wq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create summary table from water class — summarize_wq","text":"Use chemdose_dbp modeled DBP concentrations.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/summarize_wq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create summary table from water class — summarize_wq","text":"","code":"# Summarize general parameters water_defined <- define_water(7, 20, 50, 100, 80, 10, 10, 10, 10, tot_po4 = 1) #> Warning: User entered total hardness is >10% different than calculated hardness. summarize_wq(water_defined) #>  #>  #> General water quality parameters      Result  Units          #> ---------------------------------  ---------  -------------- #> pH                                    7.0000  -              #> Temp                                 20.0000  deg C          #> Alkalinity                           50.0000  mg/L as CaCO3  #> Total_Hardness                      240.9638  mg/L as CaCO3  #> TDS                                 232.4338  mg/L           #> Conductivity                        363.1779  uS/cm          #> TOC                                       NA  mg/L            # Summarize major cations and anions summarize_wq(water_defined, params = list(\"ions\")) #>  #>  #> Major ions    Concentration (mg/L) #> -----------  --------------------- #> Na                           10.00 #> Ca                           80.00 #> Mg                           10.00 #> K                            10.00 #> Cl                           10.00 #> SO4                             NA #> HCO3                         60.62 #> CO3                           0.03"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/tidywater-package.html","id":null,"dir":"Reference","previous_headings":"","what":"tidywater: Water Quality Models for Drinking Water Treatment Processes — tidywater-package","title":"tidywater: Water Quality Models for Drinking Water Treatment Processes — tidywater-package","text":"Provides multiple water chemistry-based models published empirical models one standard format. many models included possible, however, users aware models varying degrees accuracy applicability. learn , read references provided models implemented. Functions can chained together model complete treatment process designed work 'tidyverse' workflow. Models primarily based sources: Benjamin, M. M. (2002, ISBN:147862308X), Crittenden, J. C., Trussell, R., Hand, D., Howe, J. K., & Tchobanoglous, G., Borchardt, J. H. (2012, ISBN:9781118131473), USEPA. (2001) https://www.epa.gov/sites/default/files/2017-03/documents/wtp_model_v._2.0_manual_508.pdf.","code":""},{"path":[]},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/tidywater-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tidywater: Water Quality Models for Drinking Water Treatment Processes — tidywater-package","text":"Maintainer: Sierra Johnson sjohnson2@brwncald.com Authors: Libby McKenna lmckenna@brwncald.com Riley Mulhern rmulhern@brwncald.com (ORCID) Chris Corwin ccorwin@brwncald.com (ORCID) contributors: Rachel Merrifield [contributor] Mayuri Namasivayam [contributor] Phoebe Chen [contributor] Jiaming Yuan [contributor] USEPA (Copyright holder included TELSS fragments (dissolve_pb function)) [copyright holder] Brown Caldwell [funder, copyright holder]","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/toc_compliance_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame of TOC removal requirements per Stage 1 DBP Rule — toc_compliance_table","title":"Data frame of TOC removal requirements per Stage 1 DBP Rule — toc_compliance_table","text":"dataset containing required TOC removal based raw alkalinity TOC","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/toc_compliance_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame of TOC removal requirements per Stage 1 DBP Rule — toc_compliance_table","text":"","code":"toc_compliance_table"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/toc_compliance_table.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data frame of TOC removal requirements per Stage 1 DBP Rule — toc_compliance_table","text":"dataframe 9 rows 5 columns toc_min Minimum raw water TOC compliance toc_max Maximum raw water TOC compliance alk_min Minimum raw water alkalinity compliance alk_max Maximum raw water alkalinity compliance required_compliance Required percent TOC removal based raw TOC andn alklalinity range","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/toc_compliance_table.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data frame of TOC removal requirements per Stage 1 DBP Rule — toc_compliance_table","text":"Stage 1 Disinfection Byproduct Rule (1998)","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/vlog_removalcts.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame of virus log removal CT values — vlog_removalcts","title":"Data frame of virus log removal CT values — vlog_removalcts","text":"table virus log removal disinfection free chlorine, based pH, temperature, contact time","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/vlog_removalcts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame of virus log removal CT values — vlog_removalcts","text":"","code":"vlog_removalcts"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/vlog_removalcts.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data frame of virus log removal CT values — vlog_removalcts","text":"dataframe 35 rows 4 columns ph_range Specifies pH input water temp_value Specifies temperature input water ct_range Specifies range contact times achieve virus removal vlog_removal Level log virus removal corresponding ph, temp, ct","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/vlog_removalcts.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data frame of virus log removal CT values — vlog_removalcts","text":"US EPA (1991) Table E-7","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/water_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame of water quality parameters — water_df","title":"Data frame of water quality parameters — water_df","text":"dataset containing fabricated water quality use tidywater inputs. Parameters set reasonable water quality ranges. Parameters follows:","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/water_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame of water quality parameters — water_df","text":"","code":"water_df"},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/water_df.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data frame of water quality parameters — water_df","text":"dataframe 12 rows 11 columns: ph pH standard units (SU) temp Temperature degree C alk Alkalinity mg/L CaCO3 tot_hard Total hardness mg/L CaCO3 ca_hard Calcium hardness mg/L CaCO3 na Sodium mg/L Na+ k Potassium mg/L K+ cl Chloride mg/L Cl- so4 Sulfate mg/L SO42- tot_ocl Total chlorine mg/L Cl2 tot_po4 Total phosphate mg/L PO42-","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/reference/water_df.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data frame of water quality parameters — water_df","text":"Fabricated use examples.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/news/index.html","id":"tidywater-0100","dir":"Changelog","previous_headings":"","what":"tidywater 0.10.0","title":"tidywater 0.10.0","text":"CRAN release: 2025-08-24","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/news/index.html","id":"new-features-0-10-0","dir":"Changelog","previous_headings":"","what":"New features","title":"tidywater 0.10.0","text":"Revamped helpers _df replace chain functions. Use pluck_cols = TRUE mimic behavior, although always return water column well. Virus log removal added solvect_chlorine based EPA Guidance Manual Table E-7 (1991) modify_water can now modify multiple water slots . Note order modify multiple slots using modify_water_df, input arguments must included list. Acetic acid added chemical chemdose_ph. addition changing pH, dosing acetic acid also update TOC DOC input water. regulate_toc now available calculating TOC removal compliance gacrun_toc, gac_toc, gacbv_toc added predict TOC removal GAC treatment using either EPA WTP model (2001) Zachman Summers (2018) model. Different functions provide different output types: data frame TOC breakthrough curve, new water updated TOC, DOC, UV254 water slots, necessary bed volumes stay target effluent TOC. See individual functions documentation. pluck_water _df helpers sped relying base R instead purrr chemdose_toc can now account doc removal due lime softening WTP Model (2001). implement, use caoh2 argument. New model opensys_ph added predict pH alkalinity input water open carbonate system equilibrium New function plot_lead added graph pH vs DIC contour plot lead solubility Alkalinity slots added water class. alk alk_eq represent total alkalinity, individual alkalinities due carbonate, phosphate, ammonium, borate, silicate, hypochlorite added individual slots (eg. carbonate_alk_eq).","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/news/index.html","id":"breaking-changes-0-10-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"tidywater 0.10.0","text":"_chain _once functions deprecated. Replace _df functions. Code similar, slightly different outputs. Default water naming helper functions shortened remove “_water”. Eg, new default output_water = \"defined\", old default output_water = \"defined_water\". See function documentation new defaults. Total alkalinity (alk) now accounts phosphate, silicate, borate, hypochlorite, ammonia. minor impact final pH alkalinity calculations waters compounds. Now depends R >= 4.1.0 built pipe operator, |>","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/news/index.html","id":"tidywater-090","dir":"Changelog","previous_headings":"","what":"tidywater 0.9.0","title":"tidywater 0.9.0","text":"CRAN release: 2025-07-03","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/news/index.html","id":"new-features-0-9-0","dir":"Changelog","previous_headings":"","what":"New features","title":"tidywater 0.9.0","text":"New chemdose_ph chemicals: CaOCl2, CaSO4, HNO3, KMnO4, NaF, Na3PO4 New model dissolve_cu predicts concentration copper given pH, DIC, phosphate based empirical model described Lytle et al. (2018). dissolve_cu_once can also predict copper waters data frame. chemdose_dbp can now input custom fitting coefficients data frame chemdose_ph_once chemdose_toc_once back return relevant waters slots output. decarbonate_ph: function remove CO2 (H2CO3) water determine new pH (division ions) modify_water: function modify individual slots water handles unit conversions","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/news/index.html","id":"breaking-changes-0-9-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"tidywater 0.9.0","text":"applied_treatment slot removed water. providing benefit added complexity. responsibility user track. h2co3 slot added water class calculated based {H} total carbonate. chemdose_ph warns ion water slots aren’t updated due NA slots. solvedose_ph updated search range allow water qualities without erroring. Updated search process results slightly different outputs. _toc functions DOC-based previously assumed particulate TOC removal. reality, virtually particulate TOC removed particulates, models updated return TOC = DOC chemdose_toc custom coeff now accepts data frame instead named list Corrosion index slots removed water class. calculate_corrosion now outputs data frame corrosion indices columns. calculate_corrosion_chain removed base function numeric output. calculate_corrosion updated CCPP search range allow water qualities without erroring. solvect_o3 solveresid_o3 now return zero instead NaN input dose zero","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/news/index.html","id":"tidywater-082","dir":"Changelog","previous_headings":"","what":"tidywater 0.8.2","title":"tidywater 0.8.2","text":"CRAN release: 2025-05-17 Reduce examples CRAN speed .","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/news/index.html","id":"tidywater-081","dir":"Changelog","previous_headings":"","what":"tidywater 0.8.1","title":"tidywater 0.8.1","text":"Pare examples vignettes speed CRAN checks Minor updates chemdose_chloramine warnings.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/news/index.html","id":"tidywater-080","dir":"Changelog","previous_headings":"","what":"tidywater 0.8.0","title":"tidywater 0.8.0","text":"calculate_corrosion expanded CCPP search range (fewer errors)","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/news/index.html","id":"breaking-changes-0-8-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"tidywater 0.8.0","text":"Helper function (_chain _once) behavior change: can now specify column name unquoted (eg, alum = AlumDose) Removed (_once) helper functions desired output almost never water slots columns. Refer pluck_water(parameter = \"\") behavior. pac_toc now constrained accept smaller range doses times. form equation allowing negative TOC outputs. define_water, chemdose_ph, blend_waters, pH related functions slightly impacted fix concentration vs activity. Previous code assumed pH = 10^-[H+], code corrected pH = 10^-{H+}","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/news/index.html","id":"new-features-0-8-0","dir":"Changelog","previous_headings":"","what":"New features","title":"tidywater 0.8.0","text":"User may now choose cation anion use balancing ions dic now calculated define_water dic now available convert_units chemdose_chloramine: chloramine formation model given chlorine, ammonia, time chemdose_chlordecay now argument, use_chlorine_slot. Function can now use chlorine dose /free_chlorine combined_chlorine slots.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/news/index.html","id":"tidywater-070","dir":"Changelog","previous_headings":"","what":"tidywater 0.7.0","title":"tidywater 0.7.0","text":"CRAN release: 2025-01-22","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/news/index.html","id":"new-features-0-7-0","dir":"Changelog","previous_headings":"","what":"New features","title":"tidywater 0.7.0","text":"chlorine chloramine decay: chemdose_chlordecay New water slots chloramine chemistry: combined_chlorine, nh2cl, nhcl2, ncl3 solvemass_solids separates functionality solvecost_solids solve lb/day biofilter_toc, chemdose_chlordecay, ozonate_bromate, solvect helpers now available.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/news/index.html","id":"breaking-changes-0-7-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"tidywater 0.7.0","text":"chemdose_ct renamed solvect_chlorine ozonate_ct renamed solvect_o3 tot_ocl slot water renamed free_chlorine define_water argument changes: tot_ocl changed free_chlorine, added combined_chlorine Helper function (_chain _once) behavior change: multiple values specified multiple arguments, combinations used.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/news/index.html","id":"tidywater-062","dir":"Changelog","previous_headings":"","what":"tidywater 0.6.2","title":"tidywater 0.6.2","text":"CRAN release: 2024-11-05 CRAN resubmission. Minor changes DESCRIPTION examples using plan","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/news/index.html","id":"tidywater-061","dir":"Changelog","previous_headings":"","what":"tidywater 0.6.1","title":"tidywater 0.6.1","text":"Initial CRAN submission. Fix R CMD check notes","code":""},{"path":[]},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/news/index.html","id":"new-features-0-6-0","dir":"Changelog","previous_headings":"","what":"New features","title":"tidywater 0.6.0","text":"biofilter_toc updates bdoc water slot pac_toc helper functions _chain _once","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/news/index.html","id":"breaking-changes-0-6-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"tidywater 0.6.0","text":"biofilter_toc argument, o3_dose, replaced ozonated, accepts TRUE FALSE inputs","code":""},{"path":[]},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/news/index.html","id":"fixes-0-5-0","dir":"Changelog","previous_headings":"","what":"Fixes","title":"tidywater 0.5.0","text":"default temperature now 25C corrected enthalpy reaction ammonium ion completed PAC models","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/news/index.html","id":"new-features-0-5-0","dir":"Changelog","previous_headings":"","what":"New features","title":"tidywater 0.5.0","text":"chemdose_ct: CT calculations, including CT actual, CT required, giardia log removal solvecost_ family: cost calculations, including chemicals, power, solids, labor solvemass_ :convert chemical doses mg/L lb/day solveresid_o3: ozone decay model corresponding helper function WTP model ozonate_ct: ozone CT model validate water function, exported useful function writing chemdose_f: fluoride model alum addition. Requires site specific fitting. biofilter_toc: biofiltration model (Terry & Summers) added ACH chemdose_ph","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/news/index.html","id":"breaking-changes-0-5-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"tidywater 0.5.0","text":"total ammonia water slot changed tot_nh4 tot_nh3","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/news/index.html","id":"code-structure-changes-0-5-0","dir":"Changelog","previous_headings":"","what":"Code structure changes","title":"tidywater 0.5.0","text":"renamed rearranged R scripts better find functions associated helper functions update functions use base R, use dplyr functions necessary (increase speed)","code":""},{"path":[]},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/news/index.html","id":"fixes-0-4-0","dir":"Changelog","previous_headings":"","what":"Fixes","title":"tidywater 0.4.0","text":"solve_ph code updated handle starting po4 concentration","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/news/index.html","id":"new-features-0-4-0","dir":"Changelog","previous_headings":"","what":"New features","title":"tidywater 0.4.0","text":"convert_watermg cleaner water exports bromate formation models ammonia pH chemistry new water slots F, Fe, Al, etc helper functions chemdose_dbp PAC models (incomplete)","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/news/index.html","id":"breaking-changes-0-4-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"tidywater 0.4.0","text":"treatment slot renamed “applied_treatments” solve_ph changes. see different values po4 water. Added hydration ferric sulfate renamed coagulants consistency. pluck_water doesn’t allow specification output_column. named default input parameters. Improved pluck allow multiple parameters waters one function.","code":""},{"path":[]},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/news/index.html","id":"fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"Fixes","title":"tidywater 0.3.0","text":"Raw water DBP models require UVA Updated incorrect DBP model coefficients","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/news/index.html","id":"new-features-0-3-0","dir":"Changelog","previous_headings":"","what":"New features","title":"tidywater 0.3.0","text":"CaCl2 now included possible chemical addition.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/news/index.html","id":"breaking-changes-0-3-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"tidywater 0.3.0","text":"define_water now arguments “ca” “mg” longer “ca_hard”. summarize_dbp summarize_corrosion removed. summarize_wq now takes arguments summarize general, ions, dbps, corrosion","code":""},{"path":[]},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/news/index.html","id":"bug-fixes-0-2-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"tidywater 0.2.1","text":"Small vignette changes fix package build.","code":""},{"path":[]},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New features","title":"tidywater 0.2.0","text":"TOC removal coagulation, chemdose_toc matching _chain _once helper functions. DBP formation coagulation, chemdose_dbp. helper functions yet except summarise_dbp Calculation corrosion indices, calculate_corrosion summarise_corrosion helper functions. Theoretical lead solubility dissolve_pb helper functions. Helper function pluck_water pull one slot water column data frame.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/news/index.html","id":"breaking-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"tidywater 0.2.0","text":"Changes S4 water class define_water handle water quality parameters.","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/news/index.html","id":"calculation-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Calculation changes","title":"tidywater 0.2.0","text":"Activity calculated ionic strength used pH calculations. Ionic strength based TDS conductivity recalculated appropriate balance_ions chemdose_ph","code":""},{"path":"https://BrownandCaldwell-Public.github.io/tidywater/news/index.html","id":"tidywater-010","dir":"Changelog","previous_headings":"","what":"tidywater 0.1.0","title":"tidywater 0.1.0","text":"Initial release Acid/base equilibrium assumption activity = concentration Helper functions _chain _once applying models data frames.","code":""}]
